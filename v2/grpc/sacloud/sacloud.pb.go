// Copyright 2016-2020 The Libsacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/sacloud/libsacloud/v2/grpc/sacloud/sacloud.proto

package sacloud // import "github.com/sacloud/libsacloud/v2/grpc/sacloud"

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	_ "github.com/golang/protobuf/ptypes/timestamp"

	_ "github.com/sacloud/libsacloud/v2/grpc/sacloud/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindCondition struct {
	Count                int64             `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	From                 int64             `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Sort                 []string          `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
	Filter               map[string]string `protobuf:"bytes,4,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Include              []string          `protobuf:"bytes,5,rep,name=include,proto3" json:"include,omitempty"`
	Exclude              []string          `protobuf:"bytes,6,rep,name=exclude,proto3" json:"exclude,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FindCondition) Reset()         { *m = FindCondition{} }
func (m *FindCondition) String() string { return proto.CompactTextString(m) }
func (*FindCondition) ProtoMessage()    {}
func (*FindCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_sacloud_e069b66e26fbf82d, []int{0}
}
func (m *FindCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindCondition.Unmarshal(m, b)
}
func (m *FindCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindCondition.Marshal(b, m, deterministic)
}
func (dst *FindCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindCondition.Merge(dst, src)
}
func (m *FindCondition) XXX_Size() int {
	return xxx_messageInfo_FindCondition.Size(m)
}
func (m *FindCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FindCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FindCondition proto.InternalMessageInfo

func (m *FindCondition) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FindCondition) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *FindCondition) GetSort() []string {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *FindCondition) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FindCondition) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *FindCondition) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type FTPServer struct {
	HostName             string   `protobuf:"bytes,1,opt,name=hostName,proto3" json:"hostName,omitempty"`
	IpAddress            string   `protobuf:"bytes,2,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	User                 string   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FTPServer) Reset()         { *m = FTPServer{} }
func (m *FTPServer) String() string { return proto.CompactTextString(m) }
func (*FTPServer) ProtoMessage()    {}
func (*FTPServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_sacloud_e069b66e26fbf82d, []int{1}
}
func (m *FTPServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FTPServer.Unmarshal(m, b)
}
func (m *FTPServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FTPServer.Marshal(b, m, deterministic)
}
func (dst *FTPServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FTPServer.Merge(dst, src)
}
func (m *FTPServer) XXX_Size() int {
	return xxx_messageInfo_FTPServer.Size(m)
}
func (m *FTPServer) XXX_DiscardUnknown() {
	xxx_messageInfo_FTPServer.DiscardUnknown(m)
}

var xxx_messageInfo_FTPServer proto.InternalMessageInfo

func (m *FTPServer) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *FTPServer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *FTPServer) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *FTPServer) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type FTPServerInfo struct {
	HostName             string   `protobuf:"bytes,1,opt,name=hostName,proto3" json:"hostName,omitempty"`
	IpAddress            string   `protobuf:"bytes,2,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FTPServerInfo) Reset()         { *m = FTPServerInfo{} }
func (m *FTPServerInfo) String() string { return proto.CompactTextString(m) }
func (*FTPServerInfo) ProtoMessage()    {}
func (*FTPServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_sacloud_e069b66e26fbf82d, []int{2}
}
func (m *FTPServerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FTPServerInfo.Unmarshal(m, b)
}
func (m *FTPServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FTPServerInfo.Marshal(b, m, deterministic)
}
func (dst *FTPServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FTPServerInfo.Merge(dst, src)
}
func (m *FTPServerInfo) XXX_Size() int {
	return xxx_messageInfo_FTPServerInfo.Size(m)
}
func (m *FTPServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FTPServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FTPServerInfo proto.InternalMessageInfo

func (m *FTPServerInfo) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *FTPServerInfo) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

type OpenFTPRequest struct {
	ChangePassword       bool     `protobuf:"varint,1,opt,name=changePassword,proto3" json:"changePassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenFTPRequest) Reset()         { *m = OpenFTPRequest{} }
func (m *OpenFTPRequest) String() string { return proto.CompactTextString(m) }
func (*OpenFTPRequest) ProtoMessage()    {}
func (*OpenFTPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_sacloud_e069b66e26fbf82d, []int{3}
}
func (m *OpenFTPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenFTPRequest.Unmarshal(m, b)
}
func (m *OpenFTPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenFTPRequest.Marshal(b, m, deterministic)
}
func (dst *OpenFTPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenFTPRequest.Merge(dst, src)
}
func (m *OpenFTPRequest) XXX_Size() int {
	return xxx_messageInfo_OpenFTPRequest.Size(m)
}
func (m *OpenFTPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenFTPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenFTPRequest proto.InternalMessageInfo

func (m *OpenFTPRequest) GetChangePassword() bool {
	if m != nil {
		return m.ChangePassword
	}
	return false
}

func init() {
	proto.RegisterType((*FindCondition)(nil), "sacloud.FindCondition")
	proto.RegisterMapType((map[string]string)(nil), "sacloud.FindCondition.FilterEntry")
	proto.RegisterType((*FTPServer)(nil), "sacloud.FTPServer")
	proto.RegisterType((*FTPServerInfo)(nil), "sacloud.FTPServerInfo")
	proto.RegisterType((*OpenFTPRequest)(nil), "sacloud.OpenFTPRequest")
}

func init() {
	proto.RegisterFile("github.com/sacloud/libsacloud/v2/grpc/sacloud/sacloud.proto", fileDescriptor_sacloud_e069b66e26fbf82d)
}

var fileDescriptor_sacloud_e069b66e26fbf82d = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbb, 0xaf, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xa6, 0xaf, 0xb8, 0x6a, 0x85, 0x2c, 0x06, 0x2b, 0x42, 0xa2, 0xca, 0x80, 0xba,
	0x90, 0x48, 0x65, 0x29, 0x65, 0x40, 0x80, 0x88, 0xd4, 0x05, 0xaa, 0xd0, 0x89, 0x2d, 0x8f, 0x93,
	0xd4, 0x22, 0xb1, 0x83, 0x1f, 0x85, 0xfe, 0xe7, 0x8c, 0x28, 0x76, 0x52, 0xb8, 0x77, 0xeb, 0x5d,
	0x92, 0xef, 0x3b, 0x9f, 0xfd, 0x3b, 0xb6, 0x75, 0xd0, 0xbb, 0x8a, 0xaa, 0xb3, 0xce, 0xc2, 0x9c,
	0x37, 0x91, 0x4c, 0xf3, 0x9a, 0xeb, 0x22, 0xaa, 0x69, 0x36, 0xc8, 0xcb, 0x36, 0xaa, 0x44, 0x9b,
	0xdf, 0xa2, 0xfe, 0x1f, 0xb6, 0x82, 0x2b, 0x8e, 0x67, 0xbd, 0xf5, 0xdf, 0xdf, 0x47, 0x51, 0xd7,
	0x16, 0xa4, 0xfd, 0x5a, 0x92, 0xff, 0xb2, 0xe2, 0xbc, 0xaa, 0x21, 0x32, 0x2e, 0xd3, 0x65, 0xa4,
	0x68, 0x03, 0x52, 0xa5, 0x4d, 0x6b, 0x17, 0x04, 0x7f, 0x1c, 0xb4, 0x8c, 0x29, 0x2b, 0x3e, 0x71,
	0x56, 0x50, 0x45, 0x39, 0xc3, 0xcf, 0xd1, 0x24, 0xe7, 0x9a, 0x29, 0xe2, 0xac, 0x9d, 0x8d, 0x9b,
	0x58, 0x83, 0x31, 0x1a, 0x97, 0x82, 0x37, 0x64, 0x64, 0x8a, 0x46, 0x77, 0x35, 0xc9, 0x85, 0x22,
	0xee, 0xda, 0xdd, 0x78, 0x89, 0xd1, 0x78, 0x8f, 0xa6, 0x25, 0xad, 0x15, 0x08, 0x32, 0x5e, 0xbb,
	0x9b, 0xc5, 0x36, 0x08, 0x87, 0xab, 0x3d, 0xe8, 0x12, 0xc6, 0x66, 0xd1, 0x67, 0xa6, 0xc4, 0x35,
	0xe9, 0x77, 0x60, 0x82, 0x66, 0x94, 0xe5, 0xb5, 0x2e, 0x80, 0x4c, 0x0c, 0x72, 0xb0, 0x5d, 0x02,
	0xbf, 0x6d, 0x32, 0xb5, 0x49, 0x6f, 0xfd, 0xb7, 0x68, 0xf1, 0x1f, 0x0a, 0x3f, 0x43, 0xee, 0x0f,
	0xb8, 0x9a, 0xa3, 0x7b, 0x49, 0x27, 0xbb, 0xeb, 0x5c, 0xd2, 0x5a, 0x83, 0x39, 0xb9, 0x97, 0x58,
	0xb3, 0x1f, 0xed, 0x9c, 0x40, 0x23, 0x2f, 0x3e, 0x1d, 0xbf, 0x81, 0xb8, 0x80, 0xc0, 0x3e, 0x9a,
	0x9f, 0xb9, 0x54, 0x5f, 0xd2, 0x06, 0xfa, 0xdd, 0x37, 0x8f, 0x5f, 0x20, 0x8f, 0xb6, 0x1f, 0x8a,
	0x42, 0x80, 0x94, 0x3d, 0xe6, 0x5f, 0xa1, 0x7b, 0x05, 0x2d, 0x41, 0x10, 0xd7, 0x04, 0x46, 0x77,
	0xb4, 0x36, 0x95, 0xf2, 0x17, 0x17, 0x05, 0x19, 0x5b, 0xda, 0xe0, 0x83, 0x03, 0x5a, 0xde, 0xda,
	0x1e, 0x58, 0xc9, 0x9f, 0xde, 0x3a, 0xd8, 0xa1, 0xd5, 0xd7, 0x16, 0x58, 0x7c, 0x3a, 0x26, 0xf0,
	0x53, 0x83, 0x54, 0xf8, 0x15, 0x5a, 0xe5, 0xe7, 0x94, 0x55, 0x70, 0x1c, 0xda, 0x77, 0xc4, 0x79,
	0xf2, 0xa8, 0xfa, 0x31, 0xfa, 0xfe, 0xfa, 0xae, 0xd1, 0xca, 0xa6, 0x66, 0x5c, 0xde, 0xfc, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0xd6, 0x86, 0xe5, 0xd8, 0x02, 0x00, 0x00,
}
