// Copyright 2016-2021 The Libsacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-otel-tracer'; DO NOT EDIT

package otel

import (
	"context"
	"sync"

	"github.com/sacloud/libsacloud/v2"
	"github.com/sacloud/libsacloud/v2/sacloud"
	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/label"
	"go.opentelemetry.io/otel/trace"
)

var tracer = otel.GetTracerProvider().Tracer("libsacloud", trace.WithInstrumentationVersion(libsacloud.Version))

var initOnce sync.Once

// AddClientFactoryHooks add client factory hooks
func AddClientFactoryHooks() {
	initOnce.Do(func() {
		addClientFactoryHooks()
	})
}

func addClientFactoryHooks() {
	sacloud.AddClientFacotyHookFunc("Archive", func(in interface{}) interface{} {
		return NewArchiveTracer(in.(sacloud.ArchiveAPI))
	})
	sacloud.AddClientFacotyHookFunc("AuthStatus", func(in interface{}) interface{} {
		return NewAuthStatusTracer(in.(sacloud.AuthStatusAPI))
	})
	sacloud.AddClientFacotyHookFunc("AutoBackup", func(in interface{}) interface{} {
		return NewAutoBackupTracer(in.(sacloud.AutoBackupAPI))
	})
	sacloud.AddClientFacotyHookFunc("Bill", func(in interface{}) interface{} {
		return NewBillTracer(in.(sacloud.BillAPI))
	})
	sacloud.AddClientFacotyHookFunc("Bridge", func(in interface{}) interface{} {
		return NewBridgeTracer(in.(sacloud.BridgeAPI))
	})
	sacloud.AddClientFacotyHookFunc("CDROM", func(in interface{}) interface{} {
		return NewCDROMTracer(in.(sacloud.CDROMAPI))
	})
	sacloud.AddClientFacotyHookFunc("ContainerRegistry", func(in interface{}) interface{} {
		return NewContainerRegistryTracer(in.(sacloud.ContainerRegistryAPI))
	})
	sacloud.AddClientFacotyHookFunc("Coupon", func(in interface{}) interface{} {
		return NewCouponTracer(in.(sacloud.CouponAPI))
	})
	sacloud.AddClientFacotyHookFunc("Database", func(in interface{}) interface{} {
		return NewDatabaseTracer(in.(sacloud.DatabaseAPI))
	})
	sacloud.AddClientFacotyHookFunc("Disk", func(in interface{}) interface{} {
		return NewDiskTracer(in.(sacloud.DiskAPI))
	})
	sacloud.AddClientFacotyHookFunc("DiskPlan", func(in interface{}) interface{} {
		return NewDiskPlanTracer(in.(sacloud.DiskPlanAPI))
	})
	sacloud.AddClientFacotyHookFunc("DNS", func(in interface{}) interface{} {
		return NewDNSTracer(in.(sacloud.DNSAPI))
	})
	sacloud.AddClientFacotyHookFunc("ESME", func(in interface{}) interface{} {
		return NewESMETracer(in.(sacloud.ESMEAPI))
	})
	sacloud.AddClientFacotyHookFunc("GSLB", func(in interface{}) interface{} {
		return NewGSLBTracer(in.(sacloud.GSLBAPI))
	})
	sacloud.AddClientFacotyHookFunc("Icon", func(in interface{}) interface{} {
		return NewIconTracer(in.(sacloud.IconAPI))
	})
	sacloud.AddClientFacotyHookFunc("Interface", func(in interface{}) interface{} {
		return NewInterfaceTracer(in.(sacloud.InterfaceAPI))
	})
	sacloud.AddClientFacotyHookFunc("Internet", func(in interface{}) interface{} {
		return NewInternetTracer(in.(sacloud.InternetAPI))
	})
	sacloud.AddClientFacotyHookFunc("InternetPlan", func(in interface{}) interface{} {
		return NewInternetPlanTracer(in.(sacloud.InternetPlanAPI))
	})
	sacloud.AddClientFacotyHookFunc("IPAddress", func(in interface{}) interface{} {
		return NewIPAddressTracer(in.(sacloud.IPAddressAPI))
	})
	sacloud.AddClientFacotyHookFunc("IPv6Net", func(in interface{}) interface{} {
		return NewIPv6NetTracer(in.(sacloud.IPv6NetAPI))
	})
	sacloud.AddClientFacotyHookFunc("IPv6Addr", func(in interface{}) interface{} {
		return NewIPv6AddrTracer(in.(sacloud.IPv6AddrAPI))
	})
	sacloud.AddClientFacotyHookFunc("License", func(in interface{}) interface{} {
		return NewLicenseTracer(in.(sacloud.LicenseAPI))
	})
	sacloud.AddClientFacotyHookFunc("LicenseInfo", func(in interface{}) interface{} {
		return NewLicenseInfoTracer(in.(sacloud.LicenseInfoAPI))
	})
	sacloud.AddClientFacotyHookFunc("LoadBalancer", func(in interface{}) interface{} {
		return NewLoadBalancerTracer(in.(sacloud.LoadBalancerAPI))
	})
	sacloud.AddClientFacotyHookFunc("LocalRouter", func(in interface{}) interface{} {
		return NewLocalRouterTracer(in.(sacloud.LocalRouterAPI))
	})
	sacloud.AddClientFacotyHookFunc("MobileGateway", func(in interface{}) interface{} {
		return NewMobileGatewayTracer(in.(sacloud.MobileGatewayAPI))
	})
	sacloud.AddClientFacotyHookFunc("NFS", func(in interface{}) interface{} {
		return NewNFSTracer(in.(sacloud.NFSAPI))
	})
	sacloud.AddClientFacotyHookFunc("Note", func(in interface{}) interface{} {
		return NewNoteTracer(in.(sacloud.NoteAPI))
	})
	sacloud.AddClientFacotyHookFunc("PacketFilter", func(in interface{}) interface{} {
		return NewPacketFilterTracer(in.(sacloud.PacketFilterAPI))
	})
	sacloud.AddClientFacotyHookFunc("PrivateHost", func(in interface{}) interface{} {
		return NewPrivateHostTracer(in.(sacloud.PrivateHostAPI))
	})
	sacloud.AddClientFacotyHookFunc("PrivateHostPlan", func(in interface{}) interface{} {
		return NewPrivateHostPlanTracer(in.(sacloud.PrivateHostPlanAPI))
	})
	sacloud.AddClientFacotyHookFunc("ProxyLB", func(in interface{}) interface{} {
		return NewProxyLBTracer(in.(sacloud.ProxyLBAPI))
	})
	sacloud.AddClientFacotyHookFunc("Region", func(in interface{}) interface{} {
		return NewRegionTracer(in.(sacloud.RegionAPI))
	})
	sacloud.AddClientFacotyHookFunc("Server", func(in interface{}) interface{} {
		return NewServerTracer(in.(sacloud.ServerAPI))
	})
	sacloud.AddClientFacotyHookFunc("ServerPlan", func(in interface{}) interface{} {
		return NewServerPlanTracer(in.(sacloud.ServerPlanAPI))
	})
	sacloud.AddClientFacotyHookFunc("ServiceClass", func(in interface{}) interface{} {
		return NewServiceClassTracer(in.(sacloud.ServiceClassAPI))
	})
	sacloud.AddClientFacotyHookFunc("SIM", func(in interface{}) interface{} {
		return NewSIMTracer(in.(sacloud.SIMAPI))
	})
	sacloud.AddClientFacotyHookFunc("SimpleMonitor", func(in interface{}) interface{} {
		return NewSimpleMonitorTracer(in.(sacloud.SimpleMonitorAPI))
	})
	sacloud.AddClientFacotyHookFunc("SSHKey", func(in interface{}) interface{} {
		return NewSSHKeyTracer(in.(sacloud.SSHKeyAPI))
	})
	sacloud.AddClientFacotyHookFunc("Subnet", func(in interface{}) interface{} {
		return NewSubnetTracer(in.(sacloud.SubnetAPI))
	})
	sacloud.AddClientFacotyHookFunc("Switch", func(in interface{}) interface{} {
		return NewSwitchTracer(in.(sacloud.SwitchAPI))
	})
	sacloud.AddClientFacotyHookFunc("VPCRouter", func(in interface{}) interface{} {
		return NewVPCRouterTracer(in.(sacloud.VPCRouterAPI))
	})
	sacloud.AddClientFacotyHookFunc("WebAccel", func(in interface{}) interface{} {
		return NewWebAccelTracer(in.(sacloud.WebAccelAPI))
	})
	sacloud.AddClientFacotyHookFunc("Zone", func(in interface{}) interface{} {
		return NewZoneTracer(in.(sacloud.ZoneAPI))
	})
}

/*************************************************
* ArchiveTracer
*************************************************/

// ArchiveTracer is for trace ArchiveOp operations
type ArchiveTracer struct {
	Internal sacloud.ArchiveAPI
}

// NewArchiveTracer creates new ArchiveTracer instance
func NewArchiveTracer(in sacloud.ArchiveAPI) sacloud.ArchiveAPI {
	return &ArchiveTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ArchiveTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ArchiveFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *ArchiveTracer) Create(ctx context.Context, zone string, param *sacloud.ArchiveCreateRequest) (*sacloud.Archive, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultArchive, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultArchive", resultArchive))

	}

	return resultArchive, err
}

// CreateBlank is API call with trace log
func (t *ArchiveTracer) CreateBlank(ctx context.Context, zone string, param *sacloud.ArchiveCreateBlankRequest) (*sacloud.Archive, *sacloud.FTPServer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultArchive, resultFTPServer, err := t.Internal.CreateBlank(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultArchive", resultArchive))
		span.SetAttributes(label.Any("resultFTPServer", resultFTPServer))

	}

	return resultArchive, resultFTPServer, err
}

// Read is API call with trace log
func (t *ArchiveTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Archive, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultArchive, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultArchive", resultArchive))

	}

	return resultArchive, err
}

// Update is API call with trace log
func (t *ArchiveTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ArchiveUpdateRequest) (*sacloud.Archive, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultArchive, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultArchive", resultArchive))

	}

	return resultArchive, err
}

// Delete is API call with trace log
func (t *ArchiveTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// OpenFTP is API call with trace log
func (t *ArchiveTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.FTPServer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("openOption", openOption),
	))
	defer func() {
		span.End()
	}()

	resultFTPServer, err := t.Internal.OpenFTP(ctx, zone, id, openOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultFTPServer", resultFTPServer))

	}

	return resultFTPServer, err
}

// CloseFTP is API call with trace log
func (t *ArchiveTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.CloseFTP(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Share is API call with trace log
func (t *ArchiveTracer) Share(ctx context.Context, zone string, id types.ID) (*sacloud.ArchiveShareInfo, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultArchiveShareInfo, err := t.Internal.Share(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultArchiveShareInfo", resultArchiveShareInfo))

	}

	return resultArchiveShareInfo, err
}

// CreateFromShared is API call with trace log
func (t *ArchiveTracer) CreateFromShared(ctx context.Context, zone string, sourceArchiveID types.ID, destZoneID types.ID, param *sacloud.ArchiveCreateRequestFromShared) (*sacloud.Archive, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("sourceArchiveID", sourceArchiveID),
		label.Any("destZoneID", destZoneID),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultArchive, err := t.Internal.CreateFromShared(ctx, zone, sourceArchiveID, destZoneID, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultArchive", resultArchive))

	}

	return resultArchive, err
}

// Transfer is API call with trace log
func (t *ArchiveTracer) Transfer(ctx context.Context, zone string, sourceArchiveID types.ID, destZoneID types.ID, param *sacloud.ArchiveTransferRequest) (*sacloud.Archive, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("sourceArchiveID", sourceArchiveID),
		label.Any("destZoneID", destZoneID),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultArchive, err := t.Internal.Transfer(ctx, zone, sourceArchiveID, destZoneID, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultArchive", resultArchive))

	}

	return resultArchive, err
}

/*************************************************
* AuthStatusTracer
*************************************************/

// AuthStatusTracer is for trace AuthStatusOp operations
type AuthStatusTracer struct {
	Internal sacloud.AuthStatusAPI
}

// NewAuthStatusTracer creates new AuthStatusTracer instance
func NewAuthStatusTracer(in sacloud.AuthStatusAPI) sacloud.AuthStatusAPI {
	return &AuthStatusTracer{
		Internal: in,
	}
}

// Read is API call with trace log
func (t *AuthStatusTracer) Read(ctx context.Context) (*sacloud.AuthStatus, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes())
	defer func() {
		span.End()
	}()

	resultAuthStatus, err := t.Internal.Read(ctx)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultAuthStatus", resultAuthStatus))

	}

	return resultAuthStatus, err
}

/*************************************************
* AutoBackupTracer
*************************************************/

// AutoBackupTracer is for trace AutoBackupOp operations
type AutoBackupTracer struct {
	Internal sacloud.AutoBackupAPI
}

// NewAutoBackupTracer creates new AutoBackupTracer instance
func NewAutoBackupTracer(in sacloud.AutoBackupAPI) sacloud.AutoBackupAPI {
	return &AutoBackupTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *AutoBackupTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.AutoBackupFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *AutoBackupTracer) Create(ctx context.Context, zone string, param *sacloud.AutoBackupCreateRequest) (*sacloud.AutoBackup, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultAutoBackup, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultAutoBackup", resultAutoBackup))

	}

	return resultAutoBackup, err
}

// Read is API call with trace log
func (t *AutoBackupTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.AutoBackup, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultAutoBackup, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultAutoBackup", resultAutoBackup))

	}

	return resultAutoBackup, err
}

// Update is API call with trace log
func (t *AutoBackupTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.AutoBackupUpdateRequest) (*sacloud.AutoBackup, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultAutoBackup, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultAutoBackup", resultAutoBackup))

	}

	return resultAutoBackup, err
}

// UpdateSettings is API call with trace log
func (t *AutoBackupTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *sacloud.AutoBackupUpdateSettingsRequest) (*sacloud.AutoBackup, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultAutoBackup, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultAutoBackup", resultAutoBackup))

	}

	return resultAutoBackup, err
}

// Delete is API call with trace log
func (t *AutoBackupTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* BillTracer
*************************************************/

// BillTracer is for trace BillOp operations
type BillTracer struct {
	Internal sacloud.BillAPI
}

// NewBillTracer creates new BillTracer instance
func NewBillTracer(in sacloud.BillAPI) sacloud.BillAPI {
	return &BillTracer{
		Internal: in,
	}
}

// ByContract is API call with trace log
func (t *BillTracer) ByContract(ctx context.Context, accountID types.ID) (*sacloud.BillByContractResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("accountID", accountID),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.ByContract(ctx, accountID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// ByContractYear is API call with trace log
func (t *BillTracer) ByContractYear(ctx context.Context, accountID types.ID, year int) (*sacloud.BillByContractYearResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("accountID", accountID),
		label.Any("year", year),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.ByContractYear(ctx, accountID, year)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// ByContractYearMonth is API call with trace log
func (t *BillTracer) ByContractYearMonth(ctx context.Context, accountID types.ID, year int, month int) (*sacloud.BillByContractYearMonthResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("accountID", accountID),
		label.Any("year", year),
		label.Any("month", month),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.ByContractYearMonth(ctx, accountID, year, month)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *BillTracer) Read(ctx context.Context, id types.ID) (*sacloud.BillReadResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Details is API call with trace log
func (t *BillTracer) Details(ctx context.Context, MemberCode string, id types.ID) (*sacloud.BillDetailsResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("MemberCode", MemberCode),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Details(ctx, MemberCode, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// DetailsCSV is API call with trace log
func (t *BillTracer) DetailsCSV(ctx context.Context, MemberCode string, id types.ID) (*sacloud.BillDetailCSV, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("MemberCode", MemberCode),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultBillDetailCSV, err := t.Internal.DetailsCSV(ctx, MemberCode, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultBillDetailCSV", resultBillDetailCSV))

	}

	return resultBillDetailCSV, err
}

/*************************************************
* BridgeTracer
*************************************************/

// BridgeTracer is for trace BridgeOp operations
type BridgeTracer struct {
	Internal sacloud.BridgeAPI
}

// NewBridgeTracer creates new BridgeTracer instance
func NewBridgeTracer(in sacloud.BridgeAPI) sacloud.BridgeAPI {
	return &BridgeTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *BridgeTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.BridgeFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *BridgeTracer) Create(ctx context.Context, zone string, param *sacloud.BridgeCreateRequest) (*sacloud.Bridge, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultBridge, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultBridge", resultBridge))

	}

	return resultBridge, err
}

// Read is API call with trace log
func (t *BridgeTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Bridge, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultBridge, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultBridge", resultBridge))

	}

	return resultBridge, err
}

// Update is API call with trace log
func (t *BridgeTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.BridgeUpdateRequest) (*sacloud.Bridge, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultBridge, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultBridge", resultBridge))

	}

	return resultBridge, err
}

// Delete is API call with trace log
func (t *BridgeTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* CDROMTracer
*************************************************/

// CDROMTracer is for trace CDROMOp operations
type CDROMTracer struct {
	Internal sacloud.CDROMAPI
}

// NewCDROMTracer creates new CDROMTracer instance
func NewCDROMTracer(in sacloud.CDROMAPI) sacloud.CDROMAPI {
	return &CDROMTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *CDROMTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.CDROMFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *CDROMTracer) Create(ctx context.Context, zone string, param *sacloud.CDROMCreateRequest) (*sacloud.CDROM, *sacloud.FTPServer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultCDROM, resultFTPServer, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCDROM", resultCDROM))
		span.SetAttributes(label.Any("resultFTPServer", resultFTPServer))

	}

	return resultCDROM, resultFTPServer, err
}

// Read is API call with trace log
func (t *CDROMTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.CDROM, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultCDROM, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCDROM", resultCDROM))

	}

	return resultCDROM, err
}

// Update is API call with trace log
func (t *CDROMTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.CDROMUpdateRequest) (*sacloud.CDROM, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultCDROM, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCDROM", resultCDROM))

	}

	return resultCDROM, err
}

// Delete is API call with trace log
func (t *CDROMTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// OpenFTP is API call with trace log
func (t *CDROMTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.FTPServer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("openOption", openOption),
	))
	defer func() {
		span.End()
	}()

	resultFTPServer, err := t.Internal.OpenFTP(ctx, zone, id, openOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultFTPServer", resultFTPServer))

	}

	return resultFTPServer, err
}

// CloseFTP is API call with trace log
func (t *CDROMTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.CloseFTP(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* ContainerRegistryTracer
*************************************************/

// ContainerRegistryTracer is for trace ContainerRegistryOp operations
type ContainerRegistryTracer struct {
	Internal sacloud.ContainerRegistryAPI
}

// NewContainerRegistryTracer creates new ContainerRegistryTracer instance
func NewContainerRegistryTracer(in sacloud.ContainerRegistryAPI) sacloud.ContainerRegistryAPI {
	return &ContainerRegistryTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ContainerRegistryTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.ContainerRegistryFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *ContainerRegistryTracer) Create(ctx context.Context, param *sacloud.ContainerRegistryCreateRequest) (*sacloud.ContainerRegistry, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultContainerRegistry, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultContainerRegistry", resultContainerRegistry))

	}

	return resultContainerRegistry, err
}

// Read is API call with trace log
func (t *ContainerRegistryTracer) Read(ctx context.Context, id types.ID) (*sacloud.ContainerRegistry, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultContainerRegistry, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultContainerRegistry", resultContainerRegistry))

	}

	return resultContainerRegistry, err
}

// Update is API call with trace log
func (t *ContainerRegistryTracer) Update(ctx context.Context, id types.ID, param *sacloud.ContainerRegistryUpdateRequest) (*sacloud.ContainerRegistry, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultContainerRegistry, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultContainerRegistry", resultContainerRegistry))

	}

	return resultContainerRegistry, err
}

// UpdateSettings is API call with trace log
func (t *ContainerRegistryTracer) UpdateSettings(ctx context.Context, id types.ID, param *sacloud.ContainerRegistryUpdateSettingsRequest) (*sacloud.ContainerRegistry, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultContainerRegistry, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultContainerRegistry", resultContainerRegistry))

	}

	return resultContainerRegistry, err
}

// Delete is API call with trace log
func (t *ContainerRegistryTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ListUsers is API call with trace log
func (t *ContainerRegistryTracer) ListUsers(ctx context.Context, id types.ID) (*sacloud.ContainerRegistryUsers, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultContainerRegistryUsers, err := t.Internal.ListUsers(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultContainerRegistryUsers", resultContainerRegistryUsers))

	}

	return resultContainerRegistryUsers, err
}

// AddUser is API call with trace log
func (t *ContainerRegistryTracer) AddUser(ctx context.Context, id types.ID, param *sacloud.ContainerRegistryUserCreateRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.AddUser(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// UpdateUser is API call with trace log
func (t *ContainerRegistryTracer) UpdateUser(ctx context.Context, id types.ID, username string, param *sacloud.ContainerRegistryUserUpdateRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("username", username),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.UpdateUser(ctx, id, username, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DeleteUser is API call with trace log
func (t *ContainerRegistryTracer) DeleteUser(ctx context.Context, id types.ID, username string) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("username", username),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteUser(ctx, id, username)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* CouponTracer
*************************************************/

// CouponTracer is for trace CouponOp operations
type CouponTracer struct {
	Internal sacloud.CouponAPI
}

// NewCouponTracer creates new CouponTracer instance
func NewCouponTracer(in sacloud.CouponAPI) sacloud.CouponAPI {
	return &CouponTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *CouponTracer) Find(ctx context.Context, accountID types.ID) (*sacloud.CouponFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("accountID", accountID),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, accountID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

/*************************************************
* DatabaseTracer
*************************************************/

// DatabaseTracer is for trace DatabaseOp operations
type DatabaseTracer struct {
	Internal sacloud.DatabaseAPI
}

// NewDatabaseTracer creates new DatabaseTracer instance
func NewDatabaseTracer(in sacloud.DatabaseAPI) sacloud.DatabaseAPI {
	return &DatabaseTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *DatabaseTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.DatabaseFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *DatabaseTracer) Create(ctx context.Context, zone string, param *sacloud.DatabaseCreateRequest) (*sacloud.Database, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultDatabase, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDatabase", resultDatabase))

	}

	return resultDatabase, err
}

// Read is API call with trace log
func (t *DatabaseTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Database, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultDatabase, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDatabase", resultDatabase))

	}

	return resultDatabase, err
}

// Update is API call with trace log
func (t *DatabaseTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.DatabaseUpdateRequest) (*sacloud.Database, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultDatabase, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDatabase", resultDatabase))

	}

	return resultDatabase, err
}

// UpdateSettings is API call with trace log
func (t *DatabaseTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *sacloud.DatabaseUpdateSettingsRequest) (*sacloud.Database, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultDatabase, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDatabase", resultDatabase))

	}

	return resultDatabase, err
}

// Delete is API call with trace log
func (t *DatabaseTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Config is API call with trace log
func (t *DatabaseTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Boot is API call with trace log
func (t *DatabaseTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Shutdown is API call with trace log
func (t *DatabaseTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("shutdownOption", shutdownOption),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Reset is API call with trace log
func (t *DatabaseTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// MonitorCPU is API call with trace log
func (t *DatabaseTracer) MonitorCPU(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.CPUTimeActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultCPUTimeActivity, err := t.Internal.MonitorCPU(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCPUTimeActivity", resultCPUTimeActivity))

	}

	return resultCPUTimeActivity, err
}

// MonitorDisk is API call with trace log
func (t *DatabaseTracer) MonitorDisk(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.DiskActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultDiskActivity, err := t.Internal.MonitorDisk(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDiskActivity", resultDiskActivity))

	}

	return resultDiskActivity, err
}

// MonitorInterface is API call with trace log
func (t *DatabaseTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterfaceActivity", resultInterfaceActivity))

	}

	return resultInterfaceActivity, err
}

// MonitorDatabase is API call with trace log
func (t *DatabaseTracer) MonitorDatabase(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.DatabaseActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultDatabaseActivity, err := t.Internal.MonitorDatabase(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDatabaseActivity", resultDatabaseActivity))

	}

	return resultDatabaseActivity, err
}

// Status is API call with trace log
func (t *DatabaseTracer) Status(ctx context.Context, zone string, id types.ID) (*sacloud.DatabaseStatus, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultDatabaseStatus, err := t.Internal.Status(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDatabaseStatus", resultDatabaseStatus))

	}

	return resultDatabaseStatus, err
}

/*************************************************
* DiskTracer
*************************************************/

// DiskTracer is for trace DiskOp operations
type DiskTracer struct {
	Internal sacloud.DiskAPI
}

// NewDiskTracer creates new DiskTracer instance
func NewDiskTracer(in sacloud.DiskAPI) sacloud.DiskAPI {
	return &DiskTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *DiskTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.DiskFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *DiskTracer) Create(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, distantFrom []types.ID) (*sacloud.Disk, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("createParam", createParam),
		label.Any("distantFrom", distantFrom),
	))
	defer func() {
		span.End()
	}()

	resultDisk, err := t.Internal.Create(ctx, zone, createParam, distantFrom)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDisk", resultDisk))

	}

	return resultDisk, err
}

// Config is API call with trace log
func (t *DiskTracer) Config(ctx context.Context, zone string, id types.ID, edit *sacloud.DiskEditRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("edit", edit),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Config(ctx, zone, id, edit)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// CreateWithConfig is API call with trace log
func (t *DiskTracer) CreateWithConfig(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, editParam *sacloud.DiskEditRequest, bootAtAvailable bool, distantFrom []types.ID) (*sacloud.Disk, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("createParam", createParam),
		label.Any("editParam", editParam),
		label.Any("bootAtAvailable", bootAtAvailable),
		label.Any("distantFrom", distantFrom),
	))
	defer func() {
		span.End()
	}()

	resultDisk, err := t.Internal.CreateWithConfig(ctx, zone, createParam, editParam, bootAtAvailable, distantFrom)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDisk", resultDisk))

	}

	return resultDisk, err
}

// ToBlank is API call with trace log
func (t *DiskTracer) ToBlank(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ToBlank(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ResizePartition is API call with trace log
func (t *DiskTracer) ResizePartition(ctx context.Context, zone string, id types.ID, param *sacloud.DiskResizePartitionRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ResizePartition(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ConnectToServer is API call with trace log
func (t *DiskTracer) ConnectToServer(ctx context.Context, zone string, id types.ID, serverID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("serverID", serverID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ConnectToServer(ctx, zone, id, serverID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DisconnectFromServer is API call with trace log
func (t *DiskTracer) DisconnectFromServer(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DisconnectFromServer(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Install is API call with trace log
func (t *DiskTracer) Install(ctx context.Context, zone string, id types.ID, installParam *sacloud.DiskInstallRequest, distantFrom []types.ID) (*sacloud.Disk, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("installParam", installParam),
		label.Any("distantFrom", distantFrom),
	))
	defer func() {
		span.End()
	}()

	resultDisk, err := t.Internal.Install(ctx, zone, id, installParam, distantFrom)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDisk", resultDisk))

	}

	return resultDisk, err
}

// Read is API call with trace log
func (t *DiskTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Disk, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultDisk, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDisk", resultDisk))

	}

	return resultDisk, err
}

// Update is API call with trace log
func (t *DiskTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.DiskUpdateRequest) (*sacloud.Disk, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultDisk, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDisk", resultDisk))

	}

	return resultDisk, err
}

// Delete is API call with trace log
func (t *DiskTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Monitor is API call with trace log
func (t *DiskTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.DiskActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultDiskActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDiskActivity", resultDiskActivity))

	}

	return resultDiskActivity, err
}

// MonitorDisk is API call with trace log
func (t *DiskTracer) MonitorDisk(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.DiskActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultDiskActivity, err := t.Internal.MonitorDisk(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDiskActivity", resultDiskActivity))

	}

	return resultDiskActivity, err
}

/*************************************************
* DiskPlanTracer
*************************************************/

// DiskPlanTracer is for trace DiskPlanOp operations
type DiskPlanTracer struct {
	Internal sacloud.DiskPlanAPI
}

// NewDiskPlanTracer creates new DiskPlanTracer instance
func NewDiskPlanTracer(in sacloud.DiskPlanAPI) sacloud.DiskPlanAPI {
	return &DiskPlanTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *DiskPlanTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.DiskPlanFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *DiskPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.DiskPlan, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultDiskPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDiskPlan", resultDiskPlan))

	}

	return resultDiskPlan, err
}

/*************************************************
* DNSTracer
*************************************************/

// DNSTracer is for trace DNSOp operations
type DNSTracer struct {
	Internal sacloud.DNSAPI
}

// NewDNSTracer creates new DNSTracer instance
func NewDNSTracer(in sacloud.DNSAPI) sacloud.DNSAPI {
	return &DNSTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *DNSTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.DNSFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *DNSTracer) Create(ctx context.Context, param *sacloud.DNSCreateRequest) (*sacloud.DNS, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultDNS, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDNS", resultDNS))

	}

	return resultDNS, err
}

// Read is API call with trace log
func (t *DNSTracer) Read(ctx context.Context, id types.ID) (*sacloud.DNS, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultDNS, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDNS", resultDNS))

	}

	return resultDNS, err
}

// Update is API call with trace log
func (t *DNSTracer) Update(ctx context.Context, id types.ID, param *sacloud.DNSUpdateRequest) (*sacloud.DNS, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultDNS, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDNS", resultDNS))

	}

	return resultDNS, err
}

// UpdateSettings is API call with trace log
func (t *DNSTracer) UpdateSettings(ctx context.Context, id types.ID, param *sacloud.DNSUpdateSettingsRequest) (*sacloud.DNS, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultDNS, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultDNS", resultDNS))

	}

	return resultDNS, err
}

// Delete is API call with trace log
func (t *DNSTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* ESMETracer
*************************************************/

// ESMETracer is for trace ESMEOp operations
type ESMETracer struct {
	Internal sacloud.ESMEAPI
}

// NewESMETracer creates new ESMETracer instance
func NewESMETracer(in sacloud.ESMEAPI) sacloud.ESMEAPI {
	return &ESMETracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ESMETracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.ESMEFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *ESMETracer) Create(ctx context.Context, param *sacloud.ESMECreateRequest) (*sacloud.ESME, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultESME, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultESME", resultESME))

	}

	return resultESME, err
}

// Read is API call with trace log
func (t *ESMETracer) Read(ctx context.Context, id types.ID) (*sacloud.ESME, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultESME, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultESME", resultESME))

	}

	return resultESME, err
}

// Update is API call with trace log
func (t *ESMETracer) Update(ctx context.Context, id types.ID, param *sacloud.ESMEUpdateRequest) (*sacloud.ESME, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultESME, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultESME", resultESME))

	}

	return resultESME, err
}

// Delete is API call with trace log
func (t *ESMETracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// SendMessageWithGeneratedOTP is API call with trace log
func (t *ESMETracer) SendMessageWithGeneratedOTP(ctx context.Context, id types.ID, param *sacloud.ESMESendMessageWithGeneratedOTPRequest) (*sacloud.ESMESendMessageResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultESMESendMessageResult, err := t.Internal.SendMessageWithGeneratedOTP(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultESMESendMessageResult", resultESMESendMessageResult))

	}

	return resultESMESendMessageResult, err
}

// SendMessageWithInputtedOTP is API call with trace log
func (t *ESMETracer) SendMessageWithInputtedOTP(ctx context.Context, id types.ID, param *sacloud.ESMESendMessageWithInputtedOTPRequest) (*sacloud.ESMESendMessageResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultESMESendMessageResult, err := t.Internal.SendMessageWithInputtedOTP(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultESMESendMessageResult", resultESMESendMessageResult))

	}

	return resultESMESendMessageResult, err
}

// Logs is API call with trace log
func (t *ESMETracer) Logs(ctx context.Context, id types.ID) ([]*sacloud.ESMELogs, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultLogs, err := t.Internal.Logs(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLogs", resultLogs))

	}

	return resultLogs, err
}

/*************************************************
* GSLBTracer
*************************************************/

// GSLBTracer is for trace GSLBOp operations
type GSLBTracer struct {
	Internal sacloud.GSLBAPI
}

// NewGSLBTracer creates new GSLBTracer instance
func NewGSLBTracer(in sacloud.GSLBAPI) sacloud.GSLBAPI {
	return &GSLBTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *GSLBTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.GSLBFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *GSLBTracer) Create(ctx context.Context, param *sacloud.GSLBCreateRequest) (*sacloud.GSLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultGSLB, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultGSLB", resultGSLB))

	}

	return resultGSLB, err
}

// Read is API call with trace log
func (t *GSLBTracer) Read(ctx context.Context, id types.ID) (*sacloud.GSLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultGSLB, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultGSLB", resultGSLB))

	}

	return resultGSLB, err
}

// Update is API call with trace log
func (t *GSLBTracer) Update(ctx context.Context, id types.ID, param *sacloud.GSLBUpdateRequest) (*sacloud.GSLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultGSLB, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultGSLB", resultGSLB))

	}

	return resultGSLB, err
}

// UpdateSettings is API call with trace log
func (t *GSLBTracer) UpdateSettings(ctx context.Context, id types.ID, param *sacloud.GSLBUpdateSettingsRequest) (*sacloud.GSLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultGSLB, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultGSLB", resultGSLB))

	}

	return resultGSLB, err
}

// Delete is API call with trace log
func (t *GSLBTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* IconTracer
*************************************************/

// IconTracer is for trace IconOp operations
type IconTracer struct {
	Internal sacloud.IconAPI
}

// NewIconTracer creates new IconTracer instance
func NewIconTracer(in sacloud.IconAPI) sacloud.IconAPI {
	return &IconTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *IconTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.IconFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *IconTracer) Create(ctx context.Context, param *sacloud.IconCreateRequest) (*sacloud.Icon, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultIcon, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIcon", resultIcon))

	}

	return resultIcon, err
}

// Read is API call with trace log
func (t *IconTracer) Read(ctx context.Context, id types.ID) (*sacloud.Icon, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultIcon, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIcon", resultIcon))

	}

	return resultIcon, err
}

// Update is API call with trace log
func (t *IconTracer) Update(ctx context.Context, id types.ID, param *sacloud.IconUpdateRequest) (*sacloud.Icon, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultIcon, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIcon", resultIcon))

	}

	return resultIcon, err
}

// Delete is API call with trace log
func (t *IconTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* InterfaceTracer
*************************************************/

// InterfaceTracer is for trace InterfaceOp operations
type InterfaceTracer struct {
	Internal sacloud.InterfaceAPI
}

// NewInterfaceTracer creates new InterfaceTracer instance
func NewInterfaceTracer(in sacloud.InterfaceAPI) sacloud.InterfaceAPI {
	return &InterfaceTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *InterfaceTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.InterfaceFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *InterfaceTracer) Create(ctx context.Context, zone string, param *sacloud.InterfaceCreateRequest) (*sacloud.Interface, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultInterface, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterface", resultInterface))

	}

	return resultInterface, err
}

// Read is API call with trace log
func (t *InterfaceTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Interface, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultInterface, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterface", resultInterface))

	}

	return resultInterface, err
}

// Update is API call with trace log
func (t *InterfaceTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.InterfaceUpdateRequest) (*sacloud.Interface, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultInterface, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterface", resultInterface))

	}

	return resultInterface, err
}

// Delete is API call with trace log
func (t *InterfaceTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Monitor is API call with trace log
func (t *InterfaceTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultInterfaceActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterfaceActivity", resultInterfaceActivity))

	}

	return resultInterfaceActivity, err
}

// ConnectToSharedSegment is API call with trace log
func (t *InterfaceTracer) ConnectToSharedSegment(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ConnectToSharedSegment(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ConnectToSwitch is API call with trace log
func (t *InterfaceTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, switchID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("switchID", switchID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ConnectToSwitch(ctx, zone, id, switchID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DisconnectFromSwitch is API call with trace log
func (t *InterfaceTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DisconnectFromSwitch(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ConnectToPacketFilter is API call with trace log
func (t *InterfaceTracer) ConnectToPacketFilter(ctx context.Context, zone string, id types.ID, packetFilterID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("packetFilterID", packetFilterID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ConnectToPacketFilter(ctx, zone, id, packetFilterID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DisconnectFromPacketFilter is API call with trace log
func (t *InterfaceTracer) DisconnectFromPacketFilter(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DisconnectFromPacketFilter(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* InternetTracer
*************************************************/

// InternetTracer is for trace InternetOp operations
type InternetTracer struct {
	Internal sacloud.InternetAPI
}

// NewInternetTracer creates new InternetTracer instance
func NewInternetTracer(in sacloud.InternetAPI) sacloud.InternetAPI {
	return &InternetTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *InternetTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.InternetFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *InternetTracer) Create(ctx context.Context, zone string, param *sacloud.InternetCreateRequest) (*sacloud.Internet, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultInternet, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInternet", resultInternet))

	}

	return resultInternet, err
}

// Read is API call with trace log
func (t *InternetTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Internet, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultInternet, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInternet", resultInternet))

	}

	return resultInternet, err
}

// Update is API call with trace log
func (t *InternetTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.InternetUpdateRequest) (*sacloud.Internet, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultInternet, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInternet", resultInternet))

	}

	return resultInternet, err
}

// Delete is API call with trace log
func (t *InternetTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// UpdateBandWidth is API call with trace log
func (t *InternetTracer) UpdateBandWidth(ctx context.Context, zone string, id types.ID, param *sacloud.InternetUpdateBandWidthRequest) (*sacloud.Internet, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultInternet, err := t.Internal.UpdateBandWidth(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInternet", resultInternet))

	}

	return resultInternet, err
}

// AddSubnet is API call with trace log
func (t *InternetTracer) AddSubnet(ctx context.Context, zone string, id types.ID, param *sacloud.InternetAddSubnetRequest) (*sacloud.InternetSubnetOperationResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSubnet, err := t.Internal.AddSubnet(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSubnet", resultSubnet))

	}

	return resultSubnet, err
}

// UpdateSubnet is API call with trace log
func (t *InternetTracer) UpdateSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID, param *sacloud.InternetUpdateSubnetRequest) (*sacloud.InternetSubnetOperationResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("subnetID", subnetID),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSubnet, err := t.Internal.UpdateSubnet(ctx, zone, id, subnetID, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSubnet", resultSubnet))

	}

	return resultSubnet, err
}

// DeleteSubnet is API call with trace log
func (t *InternetTracer) DeleteSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("subnetID", subnetID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteSubnet(ctx, zone, id, subnetID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Monitor is API call with trace log
func (t *InternetTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.RouterActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultRouterActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultRouterActivity", resultRouterActivity))

	}

	return resultRouterActivity, err
}

// MonitorRouter is API call with trace log
func (t *InternetTracer) MonitorRouter(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.RouterActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultRouterActivity, err := t.Internal.MonitorRouter(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultRouterActivity", resultRouterActivity))

	}

	return resultRouterActivity, err
}

// EnableIPv6 is API call with trace log
func (t *InternetTracer) EnableIPv6(ctx context.Context, zone string, id types.ID) (*sacloud.IPv6NetInfo, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultIPv6Net, err := t.Internal.EnableIPv6(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIPv6Net", resultIPv6Net))

	}

	return resultIPv6Net, err
}

// DisableIPv6 is API call with trace log
func (t *InternetTracer) DisableIPv6(ctx context.Context, zone string, id types.ID, ipv6netID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("ipv6netID", ipv6netID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DisableIPv6(ctx, zone, id, ipv6netID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* InternetPlanTracer
*************************************************/

// InternetPlanTracer is for trace InternetPlanOp operations
type InternetPlanTracer struct {
	Internal sacloud.InternetPlanAPI
}

// NewInternetPlanTracer creates new InternetPlanTracer instance
func NewInternetPlanTracer(in sacloud.InternetPlanAPI) sacloud.InternetPlanAPI {
	return &InternetPlanTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *InternetPlanTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.InternetPlanFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *InternetPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.InternetPlan, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultInternetPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInternetPlan", resultInternetPlan))

	}

	return resultInternetPlan, err
}

/*************************************************
* IPAddressTracer
*************************************************/

// IPAddressTracer is for trace IPAddressOp operations
type IPAddressTracer struct {
	Internal sacloud.IPAddressAPI
}

// NewIPAddressTracer creates new IPAddressTracer instance
func NewIPAddressTracer(in sacloud.IPAddressAPI) sacloud.IPAddressAPI {
	return &IPAddressTracer{
		Internal: in,
	}
}

// List is API call with trace log
func (t *IPAddressTracer) List(ctx context.Context, zone string) (*sacloud.IPAddressListResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.List(ctx, zone)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *IPAddressTracer) Read(ctx context.Context, zone string, ipAddress string) (*sacloud.IPAddress, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("ipAddress", ipAddress),
	))
	defer func() {
		span.End()
	}()

	resultIPAddress, err := t.Internal.Read(ctx, zone, ipAddress)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIPAddress", resultIPAddress))

	}

	return resultIPAddress, err
}

// UpdateHostName is API call with trace log
func (t *IPAddressTracer) UpdateHostName(ctx context.Context, zone string, ipAddress string, hostName string) (*sacloud.IPAddress, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("ipAddress", ipAddress),
		label.Any("hostName", hostName),
	))
	defer func() {
		span.End()
	}()

	resultIPAddress, err := t.Internal.UpdateHostName(ctx, zone, ipAddress, hostName)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIPAddress", resultIPAddress))

	}

	return resultIPAddress, err
}

/*************************************************
* IPv6NetTracer
*************************************************/

// IPv6NetTracer is for trace IPv6NetOp operations
type IPv6NetTracer struct {
	Internal sacloud.IPv6NetAPI
}

// NewIPv6NetTracer creates new IPv6NetTracer instance
func NewIPv6NetTracer(in sacloud.IPv6NetAPI) sacloud.IPv6NetAPI {
	return &IPv6NetTracer{
		Internal: in,
	}
}

// List is API call with trace log
func (t *IPv6NetTracer) List(ctx context.Context, zone string) (*sacloud.IPv6NetListResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.List(ctx, zone)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Find is API call with trace log
func (t *IPv6NetTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.IPv6NetFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *IPv6NetTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.IPv6Net, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultIPv6Net, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIPv6Net", resultIPv6Net))

	}

	return resultIPv6Net, err
}

/*************************************************
* IPv6AddrTracer
*************************************************/

// IPv6AddrTracer is for trace IPv6AddrOp operations
type IPv6AddrTracer struct {
	Internal sacloud.IPv6AddrAPI
}

// NewIPv6AddrTracer creates new IPv6AddrTracer instance
func NewIPv6AddrTracer(in sacloud.IPv6AddrAPI) sacloud.IPv6AddrAPI {
	return &IPv6AddrTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *IPv6AddrTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.IPv6AddrFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *IPv6AddrTracer) Create(ctx context.Context, zone string, param *sacloud.IPv6AddrCreateRequest) (*sacloud.IPv6Addr, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultIPv6Addr, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIPv6Addr", resultIPv6Addr))

	}

	return resultIPv6Addr, err
}

// Read is API call with trace log
func (t *IPv6AddrTracer) Read(ctx context.Context, zone string, ipv6addr string) (*sacloud.IPv6Addr, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("ipv6addr", ipv6addr),
	))
	defer func() {
		span.End()
	}()

	resultIPv6Addr, err := t.Internal.Read(ctx, zone, ipv6addr)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIPv6Addr", resultIPv6Addr))

	}

	return resultIPv6Addr, err
}

// Update is API call with trace log
func (t *IPv6AddrTracer) Update(ctx context.Context, zone string, ipv6addr string, param *sacloud.IPv6AddrUpdateRequest) (*sacloud.IPv6Addr, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("ipv6addr", ipv6addr),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultIPv6Addr, err := t.Internal.Update(ctx, zone, ipv6addr, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultIPv6Addr", resultIPv6Addr))

	}

	return resultIPv6Addr, err
}

// Delete is API call with trace log
func (t *IPv6AddrTracer) Delete(ctx context.Context, zone string, ipv6addr string) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("ipv6addr", ipv6addr),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, ipv6addr)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* LicenseTracer
*************************************************/

// LicenseTracer is for trace LicenseOp operations
type LicenseTracer struct {
	Internal sacloud.LicenseAPI
}

// NewLicenseTracer creates new LicenseTracer instance
func NewLicenseTracer(in sacloud.LicenseAPI) sacloud.LicenseAPI {
	return &LicenseTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *LicenseTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.LicenseFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *LicenseTracer) Create(ctx context.Context, param *sacloud.LicenseCreateRequest) (*sacloud.License, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLicense, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLicense", resultLicense))

	}

	return resultLicense, err
}

// Read is API call with trace log
func (t *LicenseTracer) Read(ctx context.Context, id types.ID) (*sacloud.License, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultLicense, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLicense", resultLicense))

	}

	return resultLicense, err
}

// Update is API call with trace log
func (t *LicenseTracer) Update(ctx context.Context, id types.ID, param *sacloud.LicenseUpdateRequest) (*sacloud.License, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLicense, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLicense", resultLicense))

	}

	return resultLicense, err
}

// Delete is API call with trace log
func (t *LicenseTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* LicenseInfoTracer
*************************************************/

// LicenseInfoTracer is for trace LicenseInfoOp operations
type LicenseInfoTracer struct {
	Internal sacloud.LicenseInfoAPI
}

// NewLicenseInfoTracer creates new LicenseInfoTracer instance
func NewLicenseInfoTracer(in sacloud.LicenseInfoAPI) sacloud.LicenseInfoAPI {
	return &LicenseInfoTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *LicenseInfoTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.LicenseInfoFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *LicenseInfoTracer) Read(ctx context.Context, id types.ID) (*sacloud.LicenseInfo, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultLicenseInfo, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLicenseInfo", resultLicenseInfo))

	}

	return resultLicenseInfo, err
}

/*************************************************
* LoadBalancerTracer
*************************************************/

// LoadBalancerTracer is for trace LoadBalancerOp operations
type LoadBalancerTracer struct {
	Internal sacloud.LoadBalancerAPI
}

// NewLoadBalancerTracer creates new LoadBalancerTracer instance
func NewLoadBalancerTracer(in sacloud.LoadBalancerAPI) sacloud.LoadBalancerAPI {
	return &LoadBalancerTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *LoadBalancerTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.LoadBalancerFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *LoadBalancerTracer) Create(ctx context.Context, zone string, param *sacloud.LoadBalancerCreateRequest) (*sacloud.LoadBalancer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLoadBalancer, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLoadBalancer", resultLoadBalancer))

	}

	return resultLoadBalancer, err
}

// Read is API call with trace log
func (t *LoadBalancerTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.LoadBalancer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultLoadBalancer, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLoadBalancer", resultLoadBalancer))

	}

	return resultLoadBalancer, err
}

// Update is API call with trace log
func (t *LoadBalancerTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.LoadBalancerUpdateRequest) (*sacloud.LoadBalancer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLoadBalancer, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLoadBalancer", resultLoadBalancer))

	}

	return resultLoadBalancer, err
}

// UpdateSettings is API call with trace log
func (t *LoadBalancerTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *sacloud.LoadBalancerUpdateSettingsRequest) (*sacloud.LoadBalancer, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLoadBalancer, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLoadBalancer", resultLoadBalancer))

	}

	return resultLoadBalancer, err
}

// Delete is API call with trace log
func (t *LoadBalancerTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Config is API call with trace log
func (t *LoadBalancerTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Boot is API call with trace log
func (t *LoadBalancerTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Shutdown is API call with trace log
func (t *LoadBalancerTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("shutdownOption", shutdownOption),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Reset is API call with trace log
func (t *LoadBalancerTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// MonitorInterface is API call with trace log
func (t *LoadBalancerTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterfaceActivity", resultInterfaceActivity))

	}

	return resultInterfaceActivity, err
}

// Status is API call with trace log
func (t *LoadBalancerTracer) Status(ctx context.Context, zone string, id types.ID) (*sacloud.LoadBalancerStatusResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Status(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

/*************************************************
* LocalRouterTracer
*************************************************/

// LocalRouterTracer is for trace LocalRouterOp operations
type LocalRouterTracer struct {
	Internal sacloud.LocalRouterAPI
}

// NewLocalRouterTracer creates new LocalRouterTracer instance
func NewLocalRouterTracer(in sacloud.LocalRouterAPI) sacloud.LocalRouterAPI {
	return &LocalRouterTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *LocalRouterTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.LocalRouterFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *LocalRouterTracer) Create(ctx context.Context, param *sacloud.LocalRouterCreateRequest) (*sacloud.LocalRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLocalRouter, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLocalRouter", resultLocalRouter))

	}

	return resultLocalRouter, err
}

// Read is API call with trace log
func (t *LocalRouterTracer) Read(ctx context.Context, id types.ID) (*sacloud.LocalRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultLocalRouter, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLocalRouter", resultLocalRouter))

	}

	return resultLocalRouter, err
}

// Update is API call with trace log
func (t *LocalRouterTracer) Update(ctx context.Context, id types.ID, param *sacloud.LocalRouterUpdateRequest) (*sacloud.LocalRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLocalRouter, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLocalRouter", resultLocalRouter))

	}

	return resultLocalRouter, err
}

// UpdateSettings is API call with trace log
func (t *LocalRouterTracer) UpdateSettings(ctx context.Context, id types.ID, param *sacloud.LocalRouterUpdateSettingsRequest) (*sacloud.LocalRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultLocalRouter, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLocalRouter", resultLocalRouter))

	}

	return resultLocalRouter, err
}

// Delete is API call with trace log
func (t *LocalRouterTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// HealthStatus is API call with trace log
func (t *LocalRouterTracer) HealthStatus(ctx context.Context, id types.ID) (*sacloud.LocalRouterHealth, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultLocalRouterHealth, err := t.Internal.HealthStatus(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLocalRouterHealth", resultLocalRouterHealth))

	}

	return resultLocalRouterHealth, err
}

// MonitorLocalRouter is API call with trace log
func (t *LocalRouterTracer) MonitorLocalRouter(ctx context.Context, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.LocalRouterActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultLocalRouterActivity, err := t.Internal.MonitorLocalRouter(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLocalRouterActivity", resultLocalRouterActivity))

	}

	return resultLocalRouterActivity, err
}

/*************************************************
* MobileGatewayTracer
*************************************************/

// MobileGatewayTracer is for trace MobileGatewayOp operations
type MobileGatewayTracer struct {
	Internal sacloud.MobileGatewayAPI
}

// NewMobileGatewayTracer creates new MobileGatewayTracer instance
func NewMobileGatewayTracer(in sacloud.MobileGatewayAPI) sacloud.MobileGatewayAPI {
	return &MobileGatewayTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *MobileGatewayTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.MobileGatewayFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *MobileGatewayTracer) Create(ctx context.Context, zone string, param *sacloud.MobileGatewayCreateRequest) (*sacloud.MobileGateway, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultMobileGateway, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultMobileGateway", resultMobileGateway))

	}

	return resultMobileGateway, err
}

// Read is API call with trace log
func (t *MobileGatewayTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.MobileGateway, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultMobileGateway, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultMobileGateway", resultMobileGateway))

	}

	return resultMobileGateway, err
}

// Update is API call with trace log
func (t *MobileGatewayTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.MobileGatewayUpdateRequest) (*sacloud.MobileGateway, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultMobileGateway, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultMobileGateway", resultMobileGateway))

	}

	return resultMobileGateway, err
}

// UpdateSettings is API call with trace log
func (t *MobileGatewayTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *sacloud.MobileGatewayUpdateSettingsRequest) (*sacloud.MobileGateway, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultMobileGateway, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultMobileGateway", resultMobileGateway))

	}

	return resultMobileGateway, err
}

// Delete is API call with trace log
func (t *MobileGatewayTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Config is API call with trace log
func (t *MobileGatewayTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Boot is API call with trace log
func (t *MobileGatewayTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Shutdown is API call with trace log
func (t *MobileGatewayTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("shutdownOption", shutdownOption),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Reset is API call with trace log
func (t *MobileGatewayTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ConnectToSwitch is API call with trace log
func (t *MobileGatewayTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, switchID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("switchID", switchID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ConnectToSwitch(ctx, zone, id, switchID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DisconnectFromSwitch is API call with trace log
func (t *MobileGatewayTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DisconnectFromSwitch(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// GetDNS is API call with trace log
func (t *MobileGatewayTracer) GetDNS(ctx context.Context, zone string, id types.ID) (*sacloud.MobileGatewayDNSSetting, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSIMGroup, err := t.Internal.GetDNS(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSIMGroup", resultSIMGroup))

	}

	return resultSIMGroup, err
}

// SetDNS is API call with trace log
func (t *MobileGatewayTracer) SetDNS(ctx context.Context, zone string, id types.ID, param *sacloud.MobileGatewayDNSSetting) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.SetDNS(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// GetSIMRoutes is API call with trace log
func (t *MobileGatewayTracer) GetSIMRoutes(ctx context.Context, zone string, id types.ID) (sacloud.MobileGatewaySIMRoutes, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSIMRoutes, err := t.Internal.GetSIMRoutes(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSIMRoutes", resultSIMRoutes))

	}

	return resultSIMRoutes, err
}

// SetSIMRoutes is API call with trace log
func (t *MobileGatewayTracer) SetSIMRoutes(ctx context.Context, zone string, id types.ID, param []*sacloud.MobileGatewaySIMRouteParam) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.SetSIMRoutes(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ListSIM is API call with trace log
func (t *MobileGatewayTracer) ListSIM(ctx context.Context, zone string, id types.ID) (sacloud.MobileGatewaySIMs, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSIM, err := t.Internal.ListSIM(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSIM", resultSIM))

	}

	return resultSIM, err
}

// AddSIM is API call with trace log
func (t *MobileGatewayTracer) AddSIM(ctx context.Context, zone string, id types.ID, param *sacloud.MobileGatewayAddSIMRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.AddSIM(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DeleteSIM is API call with trace log
func (t *MobileGatewayTracer) DeleteSIM(ctx context.Context, zone string, id types.ID, simID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("simID", simID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteSIM(ctx, zone, id, simID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Logs is API call with trace log
func (t *MobileGatewayTracer) Logs(ctx context.Context, zone string, id types.ID) ([]*sacloud.MobileGatewaySIMLogs, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultLogs, err := t.Internal.Logs(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLogs", resultLogs))

	}

	return resultLogs, err
}

// GetTrafficConfig is API call with trace log
func (t *MobileGatewayTracer) GetTrafficConfig(ctx context.Context, zone string, id types.ID) (*sacloud.MobileGatewayTrafficControl, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultTrafficMonitoring, err := t.Internal.GetTrafficConfig(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultTrafficMonitoring", resultTrafficMonitoring))

	}

	return resultTrafficMonitoring, err
}

// SetTrafficConfig is API call with trace log
func (t *MobileGatewayTracer) SetTrafficConfig(ctx context.Context, zone string, id types.ID, param *sacloud.MobileGatewayTrafficControl) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.SetTrafficConfig(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DeleteTrafficConfig is API call with trace log
func (t *MobileGatewayTracer) DeleteTrafficConfig(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteTrafficConfig(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// TrafficStatus is API call with trace log
func (t *MobileGatewayTracer) TrafficStatus(ctx context.Context, zone string, id types.ID) (*sacloud.MobileGatewayTrafficStatus, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultTrafficStatus, err := t.Internal.TrafficStatus(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultTrafficStatus", resultTrafficStatus))

	}

	return resultTrafficStatus, err
}

// MonitorInterface is API call with trace log
func (t *MobileGatewayTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, index int, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("index", index),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, index, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterfaceActivity", resultInterfaceActivity))

	}

	return resultInterfaceActivity, err
}

/*************************************************
* NFSTracer
*************************************************/

// NFSTracer is for trace NFSOp operations
type NFSTracer struct {
	Internal sacloud.NFSAPI
}

// NewNFSTracer creates new NFSTracer instance
func NewNFSTracer(in sacloud.NFSAPI) sacloud.NFSAPI {
	return &NFSTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *NFSTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.NFSFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *NFSTracer) Create(ctx context.Context, zone string, param *sacloud.NFSCreateRequest) (*sacloud.NFS, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultNFS, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultNFS", resultNFS))

	}

	return resultNFS, err
}

// Read is API call with trace log
func (t *NFSTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.NFS, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultNFS, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultNFS", resultNFS))

	}

	return resultNFS, err
}

// Update is API call with trace log
func (t *NFSTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.NFSUpdateRequest) (*sacloud.NFS, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultNFS, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultNFS", resultNFS))

	}

	return resultNFS, err
}

// Delete is API call with trace log
func (t *NFSTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Boot is API call with trace log
func (t *NFSTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Shutdown is API call with trace log
func (t *NFSTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("shutdownOption", shutdownOption),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Reset is API call with trace log
func (t *NFSTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// MonitorFreeDiskSize is API call with trace log
func (t *NFSTracer) MonitorFreeDiskSize(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.FreeDiskSizeActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultFreeDiskSizeActivity, err := t.Internal.MonitorFreeDiskSize(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultFreeDiskSizeActivity", resultFreeDiskSizeActivity))

	}

	return resultFreeDiskSizeActivity, err
}

// MonitorInterface is API call with trace log
func (t *NFSTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterfaceActivity", resultInterfaceActivity))

	}

	return resultInterfaceActivity, err
}

/*************************************************
* NoteTracer
*************************************************/

// NoteTracer is for trace NoteOp operations
type NoteTracer struct {
	Internal sacloud.NoteAPI
}

// NewNoteTracer creates new NoteTracer instance
func NewNoteTracer(in sacloud.NoteAPI) sacloud.NoteAPI {
	return &NoteTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *NoteTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.NoteFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *NoteTracer) Create(ctx context.Context, param *sacloud.NoteCreateRequest) (*sacloud.Note, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultNote, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultNote", resultNote))

	}

	return resultNote, err
}

// Read is API call with trace log
func (t *NoteTracer) Read(ctx context.Context, id types.ID) (*sacloud.Note, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultNote, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultNote", resultNote))

	}

	return resultNote, err
}

// Update is API call with trace log
func (t *NoteTracer) Update(ctx context.Context, id types.ID, param *sacloud.NoteUpdateRequest) (*sacloud.Note, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultNote, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultNote", resultNote))

	}

	return resultNote, err
}

// Delete is API call with trace log
func (t *NoteTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* PacketFilterTracer
*************************************************/

// PacketFilterTracer is for trace PacketFilterOp operations
type PacketFilterTracer struct {
	Internal sacloud.PacketFilterAPI
}

// NewPacketFilterTracer creates new PacketFilterTracer instance
func NewPacketFilterTracer(in sacloud.PacketFilterAPI) sacloud.PacketFilterAPI {
	return &PacketFilterTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *PacketFilterTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.PacketFilterFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *PacketFilterTracer) Create(ctx context.Context, zone string, param *sacloud.PacketFilterCreateRequest) (*sacloud.PacketFilter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultPacketFilter, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultPacketFilter", resultPacketFilter))

	}

	return resultPacketFilter, err
}

// Read is API call with trace log
func (t *PacketFilterTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.PacketFilter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultPacketFilter, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultPacketFilter", resultPacketFilter))

	}

	return resultPacketFilter, err
}

// Update is API call with trace log
func (t *PacketFilterTracer) Update(ctx context.Context, zone string, id types.ID, updateParam *sacloud.PacketFilterUpdateRequest, originalExpressionHash string) (*sacloud.PacketFilter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("updateParam", updateParam),
		label.Any("originalExpressionHash", originalExpressionHash),
	))
	defer func() {
		span.End()
	}()

	resultPacketFilter, err := t.Internal.Update(ctx, zone, id, updateParam, originalExpressionHash)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultPacketFilter", resultPacketFilter))

	}

	return resultPacketFilter, err
}

// Delete is API call with trace log
func (t *PacketFilterTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* PrivateHostTracer
*************************************************/

// PrivateHostTracer is for trace PrivateHostOp operations
type PrivateHostTracer struct {
	Internal sacloud.PrivateHostAPI
}

// NewPrivateHostTracer creates new PrivateHostTracer instance
func NewPrivateHostTracer(in sacloud.PrivateHostAPI) sacloud.PrivateHostAPI {
	return &PrivateHostTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *PrivateHostTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.PrivateHostFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *PrivateHostTracer) Create(ctx context.Context, zone string, param *sacloud.PrivateHostCreateRequest) (*sacloud.PrivateHost, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultPrivateHost, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultPrivateHost", resultPrivateHost))

	}

	return resultPrivateHost, err
}

// Read is API call with trace log
func (t *PrivateHostTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.PrivateHost, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultPrivateHost, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultPrivateHost", resultPrivateHost))

	}

	return resultPrivateHost, err
}

// Update is API call with trace log
func (t *PrivateHostTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.PrivateHostUpdateRequest) (*sacloud.PrivateHost, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultPrivateHost, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultPrivateHost", resultPrivateHost))

	}

	return resultPrivateHost, err
}

// Delete is API call with trace log
func (t *PrivateHostTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* PrivateHostPlanTracer
*************************************************/

// PrivateHostPlanTracer is for trace PrivateHostPlanOp operations
type PrivateHostPlanTracer struct {
	Internal sacloud.PrivateHostPlanAPI
}

// NewPrivateHostPlanTracer creates new PrivateHostPlanTracer instance
func NewPrivateHostPlanTracer(in sacloud.PrivateHostPlanAPI) sacloud.PrivateHostPlanAPI {
	return &PrivateHostPlanTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *PrivateHostPlanTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.PrivateHostPlanFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *PrivateHostPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.PrivateHostPlan, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultPrivateHostPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultPrivateHostPlan", resultPrivateHostPlan))

	}

	return resultPrivateHostPlan, err
}

/*************************************************
* ProxyLBTracer
*************************************************/

// ProxyLBTracer is for trace ProxyLBOp operations
type ProxyLBTracer struct {
	Internal sacloud.ProxyLBAPI
}

// NewProxyLBTracer creates new ProxyLBTracer instance
func NewProxyLBTracer(in sacloud.ProxyLBAPI) sacloud.ProxyLBAPI {
	return &ProxyLBTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ProxyLBTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.ProxyLBFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *ProxyLBTracer) Create(ctx context.Context, param *sacloud.ProxyLBCreateRequest) (*sacloud.ProxyLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultProxyLB, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLB", resultProxyLB))

	}

	return resultProxyLB, err
}

// Read is API call with trace log
func (t *ProxyLBTracer) Read(ctx context.Context, id types.ID) (*sacloud.ProxyLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultProxyLB, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLB", resultProxyLB))

	}

	return resultProxyLB, err
}

// Update is API call with trace log
func (t *ProxyLBTracer) Update(ctx context.Context, id types.ID, param *sacloud.ProxyLBUpdateRequest) (*sacloud.ProxyLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultProxyLB, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLB", resultProxyLB))

	}

	return resultProxyLB, err
}

// UpdateSettings is API call with trace log
func (t *ProxyLBTracer) UpdateSettings(ctx context.Context, id types.ID, param *sacloud.ProxyLBUpdateSettingsRequest) (*sacloud.ProxyLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultProxyLB, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLB", resultProxyLB))

	}

	return resultProxyLB, err
}

// Delete is API call with trace log
func (t *ProxyLBTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ChangePlan is API call with trace log
func (t *ProxyLBTracer) ChangePlan(ctx context.Context, id types.ID, param *sacloud.ProxyLBChangePlanRequest) (*sacloud.ProxyLB, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultProxyLB, err := t.Internal.ChangePlan(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLB", resultProxyLB))

	}

	return resultProxyLB, err
}

// GetCertificates is API call with trace log
func (t *ProxyLBTracer) GetCertificates(ctx context.Context, id types.ID) (*sacloud.ProxyLBCertificates, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultProxyLBCertificates, err := t.Internal.GetCertificates(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLBCertificates", resultProxyLBCertificates))

	}

	return resultProxyLBCertificates, err
}

// SetCertificates is API call with trace log
func (t *ProxyLBTracer) SetCertificates(ctx context.Context, id types.ID, param *sacloud.ProxyLBSetCertificatesRequest) (*sacloud.ProxyLBCertificates, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultProxyLBCertificates, err := t.Internal.SetCertificates(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLBCertificates", resultProxyLBCertificates))

	}

	return resultProxyLBCertificates, err
}

// DeleteCertificates is API call with trace log
func (t *ProxyLBTracer) DeleteCertificates(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteCertificates(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// RenewLetsEncryptCert is API call with trace log
func (t *ProxyLBTracer) RenewLetsEncryptCert(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.RenewLetsEncryptCert(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// HealthStatus is API call with trace log
func (t *ProxyLBTracer) HealthStatus(ctx context.Context, id types.ID) (*sacloud.ProxyLBHealth, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultProxyLBHealth, err := t.Internal.HealthStatus(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultProxyLBHealth", resultProxyLBHealth))

	}

	return resultProxyLBHealth, err
}

// MonitorConnection is API call with trace log
func (t *ProxyLBTracer) MonitorConnection(ctx context.Context, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.ConnectionActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultConnectionActivity, err := t.Internal.MonitorConnection(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultConnectionActivity", resultConnectionActivity))

	}

	return resultConnectionActivity, err
}

/*************************************************
* RegionTracer
*************************************************/

// RegionTracer is for trace RegionOp operations
type RegionTracer struct {
	Internal sacloud.RegionAPI
}

// NewRegionTracer creates new RegionTracer instance
func NewRegionTracer(in sacloud.RegionAPI) sacloud.RegionAPI {
	return &RegionTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *RegionTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.RegionFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *RegionTracer) Read(ctx context.Context, id types.ID) (*sacloud.Region, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultRegion, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultRegion", resultRegion))

	}

	return resultRegion, err
}

/*************************************************
* ServerTracer
*************************************************/

// ServerTracer is for trace ServerOp operations
type ServerTracer struct {
	Internal sacloud.ServerAPI
}

// NewServerTracer creates new ServerTracer instance
func NewServerTracer(in sacloud.ServerAPI) sacloud.ServerAPI {
	return &ServerTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ServerTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ServerFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *ServerTracer) Create(ctx context.Context, zone string, param *sacloud.ServerCreateRequest) (*sacloud.Server, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultServer, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultServer", resultServer))

	}

	return resultServer, err
}

// Read is API call with trace log
func (t *ServerTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Server, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultServer, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultServer", resultServer))

	}

	return resultServer, err
}

// Update is API call with trace log
func (t *ServerTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ServerUpdateRequest) (*sacloud.Server, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultServer, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultServer", resultServer))

	}

	return resultServer, err
}

// Delete is API call with trace log
func (t *ServerTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DeleteWithDisks is API call with trace log
func (t *ServerTracer) DeleteWithDisks(ctx context.Context, zone string, id types.ID, disks *sacloud.ServerDeleteWithDisksRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("disks", disks),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteWithDisks(ctx, zone, id, disks)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ChangePlan is API call with trace log
func (t *ServerTracer) ChangePlan(ctx context.Context, zone string, id types.ID, plan *sacloud.ServerChangePlanRequest) (*sacloud.Server, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("plan", plan),
	))
	defer func() {
		span.End()
	}()

	resultServer, err := t.Internal.ChangePlan(ctx, zone, id, plan)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultServer", resultServer))

	}

	return resultServer, err
}

// InsertCDROM is API call with trace log
func (t *ServerTracer) InsertCDROM(ctx context.Context, zone string, id types.ID, insertParam *sacloud.InsertCDROMRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("insertParam", insertParam),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.InsertCDROM(ctx, zone, id, insertParam)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// EjectCDROM is API call with trace log
func (t *ServerTracer) EjectCDROM(ctx context.Context, zone string, id types.ID, ejectParam *sacloud.EjectCDROMRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("ejectParam", ejectParam),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.EjectCDROM(ctx, zone, id, ejectParam)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Boot is API call with trace log
func (t *ServerTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Shutdown is API call with trace log
func (t *ServerTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("shutdownOption", shutdownOption),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Reset is API call with trace log
func (t *ServerTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// SendKey is API call with trace log
func (t *ServerTracer) SendKey(ctx context.Context, zone string, id types.ID, keyboardParam *sacloud.SendKeyRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("keyboardParam", keyboardParam),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.SendKey(ctx, zone, id, keyboardParam)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// GetVNCProxy is API call with trace log
func (t *ServerTracer) GetVNCProxy(ctx context.Context, zone string, id types.ID) (*sacloud.VNCProxyInfo, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultVNCProxyInfo, err := t.Internal.GetVNCProxy(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultVNCProxyInfo", resultVNCProxyInfo))

	}

	return resultVNCProxyInfo, err
}

// Monitor is API call with trace log
func (t *ServerTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.CPUTimeActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultCPUTimeActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCPUTimeActivity", resultCPUTimeActivity))

	}

	return resultCPUTimeActivity, err
}

// MonitorCPU is API call with trace log
func (t *ServerTracer) MonitorCPU(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.CPUTimeActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultCPUTimeActivity, err := t.Internal.MonitorCPU(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCPUTimeActivity", resultCPUTimeActivity))

	}

	return resultCPUTimeActivity, err
}

/*************************************************
* ServerPlanTracer
*************************************************/

// ServerPlanTracer is for trace ServerPlanOp operations
type ServerPlanTracer struct {
	Internal sacloud.ServerPlanAPI
}

// NewServerPlanTracer creates new ServerPlanTracer instance
func NewServerPlanTracer(in sacloud.ServerPlanAPI) sacloud.ServerPlanAPI {
	return &ServerPlanTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ServerPlanTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ServerPlanFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *ServerPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.ServerPlan, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultServerPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultServerPlan", resultServerPlan))

	}

	return resultServerPlan, err
}

/*************************************************
* ServiceClassTracer
*************************************************/

// ServiceClassTracer is for trace ServiceClassOp operations
type ServiceClassTracer struct {
	Internal sacloud.ServiceClassAPI
}

// NewServiceClassTracer creates new ServiceClassTracer instance
func NewServiceClassTracer(in sacloud.ServiceClassAPI) sacloud.ServiceClassAPI {
	return &ServiceClassTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ServiceClassTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ServiceClassFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

/*************************************************
* SIMTracer
*************************************************/

// SIMTracer is for trace SIMOp operations
type SIMTracer struct {
	Internal sacloud.SIMAPI
}

// NewSIMTracer creates new SIMTracer instance
func NewSIMTracer(in sacloud.SIMAPI) sacloud.SIMAPI {
	return &SIMTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SIMTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.SIMFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *SIMTracer) Create(ctx context.Context, param *sacloud.SIMCreateRequest) (*sacloud.SIM, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSIM, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSIM", resultSIM))

	}

	return resultSIM, err
}

// Read is API call with trace log
func (t *SIMTracer) Read(ctx context.Context, id types.ID) (*sacloud.SIM, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSIM, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSIM", resultSIM))

	}

	return resultSIM, err
}

// Update is API call with trace log
func (t *SIMTracer) Update(ctx context.Context, id types.ID, param *sacloud.SIMUpdateRequest) (*sacloud.SIM, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSIM, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSIM", resultSIM))

	}

	return resultSIM, err
}

// Delete is API call with trace log
func (t *SIMTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Activate is API call with trace log
func (t *SIMTracer) Activate(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Activate(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Deactivate is API call with trace log
func (t *SIMTracer) Deactivate(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Deactivate(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// AssignIP is API call with trace log
func (t *SIMTracer) AssignIP(ctx context.Context, id types.ID, param *sacloud.SIMAssignIPRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.AssignIP(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ClearIP is API call with trace log
func (t *SIMTracer) ClearIP(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ClearIP(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// IMEILock is API call with trace log
func (t *SIMTracer) IMEILock(ctx context.Context, id types.ID, param *sacloud.SIMIMEILockRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.IMEILock(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// IMEIUnlock is API call with trace log
func (t *SIMTracer) IMEIUnlock(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.IMEIUnlock(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Logs is API call with trace log
func (t *SIMTracer) Logs(ctx context.Context, id types.ID) (*sacloud.SIMLogsResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Logs(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// GetNetworkOperator is API call with trace log
func (t *SIMTracer) GetNetworkOperator(ctx context.Context, id types.ID) ([]*sacloud.SIMNetworkOperatorConfig, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultConfigs, err := t.Internal.GetNetworkOperator(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultConfigs", resultConfigs))

	}

	return resultConfigs, err
}

// SetNetworkOperator is API call with trace log
func (t *SIMTracer) SetNetworkOperator(ctx context.Context, id types.ID, configs []*sacloud.SIMNetworkOperatorConfig) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("configs", configs),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.SetNetworkOperator(ctx, id, configs)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// MonitorSIM is API call with trace log
func (t *SIMTracer) MonitorSIM(ctx context.Context, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.LinkActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultLinkActivity, err := t.Internal.MonitorSIM(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultLinkActivity", resultLinkActivity))

	}

	return resultLinkActivity, err
}

// Status is API call with trace log
func (t *SIMTracer) Status(ctx context.Context, id types.ID) (*sacloud.SIMInfo, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSIM, err := t.Internal.Status(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSIM", resultSIM))

	}

	return resultSIM, err
}

/*************************************************
* SimpleMonitorTracer
*************************************************/

// SimpleMonitorTracer is for trace SimpleMonitorOp operations
type SimpleMonitorTracer struct {
	Internal sacloud.SimpleMonitorAPI
}

// NewSimpleMonitorTracer creates new SimpleMonitorTracer instance
func NewSimpleMonitorTracer(in sacloud.SimpleMonitorAPI) sacloud.SimpleMonitorAPI {
	return &SimpleMonitorTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SimpleMonitorTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.SimpleMonitorFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *SimpleMonitorTracer) Create(ctx context.Context, param *sacloud.SimpleMonitorCreateRequest) (*sacloud.SimpleMonitor, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSimpleMonitor, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSimpleMonitor", resultSimpleMonitor))

	}

	return resultSimpleMonitor, err
}

// Read is API call with trace log
func (t *SimpleMonitorTracer) Read(ctx context.Context, id types.ID) (*sacloud.SimpleMonitor, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSimpleMonitor, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSimpleMonitor", resultSimpleMonitor))

	}

	return resultSimpleMonitor, err
}

// Update is API call with trace log
func (t *SimpleMonitorTracer) Update(ctx context.Context, id types.ID, param *sacloud.SimpleMonitorUpdateRequest) (*sacloud.SimpleMonitor, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSimpleMonitor, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSimpleMonitor", resultSimpleMonitor))

	}

	return resultSimpleMonitor, err
}

// UpdateSettings is API call with trace log
func (t *SimpleMonitorTracer) UpdateSettings(ctx context.Context, id types.ID, param *sacloud.SimpleMonitorUpdateSettingsRequest) (*sacloud.SimpleMonitor, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSimpleMonitor, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSimpleMonitor", resultSimpleMonitor))

	}

	return resultSimpleMonitor, err
}

// Delete is API call with trace log
func (t *SimpleMonitorTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// MonitorResponseTime is API call with trace log
func (t *SimpleMonitorTracer) MonitorResponseTime(ctx context.Context, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.ResponseTimeSecActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultResponseTimeSecActivity, err := t.Internal.MonitorResponseTime(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultResponseTimeSecActivity", resultResponseTimeSecActivity))

	}

	return resultResponseTimeSecActivity, err
}

// HealthStatus is API call with trace log
func (t *SimpleMonitorTracer) HealthStatus(ctx context.Context, id types.ID) (*sacloud.SimpleMonitorHealthStatus, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSimpleMonitorHealthStatus, err := t.Internal.HealthStatus(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSimpleMonitorHealthStatus", resultSimpleMonitorHealthStatus))

	}

	return resultSimpleMonitorHealthStatus, err
}

/*************************************************
* SSHKeyTracer
*************************************************/

// SSHKeyTracer is for trace SSHKeyOp operations
type SSHKeyTracer struct {
	Internal sacloud.SSHKeyAPI
}

// NewSSHKeyTracer creates new SSHKeyTracer instance
func NewSSHKeyTracer(in sacloud.SSHKeyAPI) sacloud.SSHKeyAPI {
	return &SSHKeyTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SSHKeyTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.SSHKeyFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *SSHKeyTracer) Create(ctx context.Context, param *sacloud.SSHKeyCreateRequest) (*sacloud.SSHKey, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSSHKey, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSSHKey", resultSSHKey))

	}

	return resultSSHKey, err
}

// Generate is API call with trace log
func (t *SSHKeyTracer) Generate(ctx context.Context, param *sacloud.SSHKeyGenerateRequest) (*sacloud.SSHKeyGenerated, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSSHKeyGenerated, err := t.Internal.Generate(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSSHKeyGenerated", resultSSHKeyGenerated))

	}

	return resultSSHKeyGenerated, err
}

// Read is API call with trace log
func (t *SSHKeyTracer) Read(ctx context.Context, id types.ID) (*sacloud.SSHKey, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSSHKey, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSSHKey", resultSSHKey))

	}

	return resultSSHKey, err
}

// Update is API call with trace log
func (t *SSHKeyTracer) Update(ctx context.Context, id types.ID, param *sacloud.SSHKeyUpdateRequest) (*sacloud.SSHKey, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSSHKey, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSSHKey", resultSSHKey))

	}

	return resultSSHKey, err
}

// Delete is API call with trace log
func (t *SSHKeyTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

/*************************************************
* SubnetTracer
*************************************************/

// SubnetTracer is for trace SubnetOp operations
type SubnetTracer struct {
	Internal sacloud.SubnetAPI
}

// NewSubnetTracer creates new SubnetTracer instance
func NewSubnetTracer(in sacloud.SubnetAPI) sacloud.SubnetAPI {
	return &SubnetTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SubnetTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.SubnetFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *SubnetTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Subnet, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSubnet, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSubnet", resultSubnet))

	}

	return resultSubnet, err
}

/*************************************************
* SwitchTracer
*************************************************/

// SwitchTracer is for trace SwitchOp operations
type SwitchTracer struct {
	Internal sacloud.SwitchAPI
}

// NewSwitchTracer creates new SwitchTracer instance
func NewSwitchTracer(in sacloud.SwitchAPI) sacloud.SwitchAPI {
	return &SwitchTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SwitchTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.SwitchFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *SwitchTracer) Create(ctx context.Context, zone string, param *sacloud.SwitchCreateRequest) (*sacloud.Switch, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSwitch, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSwitch", resultSwitch))

	}

	return resultSwitch, err
}

// Read is API call with trace log
func (t *SwitchTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Switch, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultSwitch, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSwitch", resultSwitch))

	}

	return resultSwitch, err
}

// Update is API call with trace log
func (t *SwitchTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.SwitchUpdateRequest) (*sacloud.Switch, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultSwitch, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultSwitch", resultSwitch))

	}

	return resultSwitch, err
}

// Delete is API call with trace log
func (t *SwitchTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ConnectToBridge is API call with trace log
func (t *SwitchTracer) ConnectToBridge(ctx context.Context, zone string, id types.ID, bridgeID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("bridgeID", bridgeID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ConnectToBridge(ctx, zone, id, bridgeID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DisconnectFromBridge is API call with trace log
func (t *SwitchTracer) DisconnectFromBridge(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DisconnectFromBridge(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// GetServers is API call with trace log
func (t *SwitchTracer) GetServers(ctx context.Context, zone string, id types.ID) (*sacloud.SwitchGetServersResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.GetServers(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

/*************************************************
* VPCRouterTracer
*************************************************/

// VPCRouterTracer is for trace VPCRouterOp operations
type VPCRouterTracer struct {
	Internal sacloud.VPCRouterAPI
}

// NewVPCRouterTracer creates new VPCRouterTracer instance
func NewVPCRouterTracer(in sacloud.VPCRouterAPI) sacloud.VPCRouterAPI {
	return &VPCRouterTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *VPCRouterTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.VPCRouterFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Create is API call with trace log
func (t *VPCRouterTracer) Create(ctx context.Context, zone string, param *sacloud.VPCRouterCreateRequest) (*sacloud.VPCRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultVPCRouter, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultVPCRouter", resultVPCRouter))

	}

	return resultVPCRouter, err
}

// Read is API call with trace log
func (t *VPCRouterTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.VPCRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultVPCRouter, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultVPCRouter", resultVPCRouter))

	}

	return resultVPCRouter, err
}

// Update is API call with trace log
func (t *VPCRouterTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.VPCRouterUpdateRequest) (*sacloud.VPCRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultVPCRouter, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultVPCRouter", resultVPCRouter))

	}

	return resultVPCRouter, err
}

// UpdateSettings is API call with trace log
func (t *VPCRouterTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *sacloud.VPCRouterUpdateSettingsRequest) (*sacloud.VPCRouter, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultVPCRouter, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultVPCRouter", resultVPCRouter))

	}

	return resultVPCRouter, err
}

// Delete is API call with trace log
func (t *VPCRouterTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Config is API call with trace log
func (t *VPCRouterTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Boot is API call with trace log
func (t *VPCRouterTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Shutdown is API call with trace log
func (t *VPCRouterTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("shutdownOption", shutdownOption),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// Reset is API call with trace log
func (t *VPCRouterTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// ConnectToSwitch is API call with trace log
func (t *VPCRouterTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, nicIndex int, switchID types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("nicIndex", nicIndex),
		label.Any("switchID", switchID),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.ConnectToSwitch(ctx, zone, id, nicIndex, switchID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DisconnectFromSwitch is API call with trace log
func (t *VPCRouterTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID, nicIndex int) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("nicIndex", nicIndex),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DisconnectFromSwitch(ctx, zone, id, nicIndex)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// MonitorInterface is API call with trace log
func (t *VPCRouterTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, index int, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
		label.Any("index", index),
		label.Any("condition", condition),
	))
	defer func() {
		span.End()
	}()

	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, index, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultInterfaceActivity", resultInterfaceActivity))

	}

	return resultInterfaceActivity, err
}

// Status is API call with trace log
func (t *VPCRouterTracer) Status(ctx context.Context, zone string, id types.ID) (*sacloud.VPCRouterStatus, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.String("zone", zone),
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultVPCRouterStatus, err := t.Internal.Status(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultVPCRouterStatus", resultVPCRouterStatus))

	}

	return resultVPCRouterStatus, err
}

/*************************************************
* WebAccelTracer
*************************************************/

// WebAccelTracer is for trace WebAccelOp operations
type WebAccelTracer struct {
	Internal sacloud.WebAccelAPI
}

// NewWebAccelTracer creates new WebAccelTracer instance
func NewWebAccelTracer(in sacloud.WebAccelAPI) sacloud.WebAccelAPI {
	return &WebAccelTracer{
		Internal: in,
	}
}

// List is API call with trace log
func (t *WebAccelTracer) List(ctx context.Context) (*sacloud.WebAccelListResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes())
	defer func() {
		span.End()
	}()

	result, err := t.Internal.List(ctx)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *WebAccelTracer) Read(ctx context.Context, id types.ID) (*sacloud.WebAccel, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultWebAccel, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultWebAccel", resultWebAccel))

	}

	return resultWebAccel, err
}

// ReadCertificate is API call with trace log
func (t *WebAccelTracer) ReadCertificate(ctx context.Context, id types.ID) (*sacloud.WebAccelCerts, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultCertificate, err := t.Internal.ReadCertificate(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCertificate", resultCertificate))

	}

	return resultCertificate, err
}

// CreateCertificate is API call with trace log
func (t *WebAccelTracer) CreateCertificate(ctx context.Context, id types.ID, param *sacloud.WebAccelCertRequest) (*sacloud.WebAccelCerts, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultCertificate, err := t.Internal.CreateCertificate(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCertificate", resultCertificate))

	}

	return resultCertificate, err
}

// UpdateCertificate is API call with trace log
func (t *WebAccelTracer) UpdateCertificate(ctx context.Context, id types.ID, param *sacloud.WebAccelCertRequest) (*sacloud.WebAccelCerts, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultCertificate, err := t.Internal.UpdateCertificate(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultCertificate", resultCertificate))

	}

	return resultCertificate, err
}

// DeleteCertificate is API call with trace log
func (t *WebAccelTracer) DeleteCertificate(ctx context.Context, id types.ID) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteCertificate(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DeleteAllCache is API call with trace log
func (t *WebAccelTracer) DeleteAllCache(ctx context.Context, param *sacloud.WebAccelDeleteAllCacheRequest) error {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	err := t.Internal.DeleteAllCache(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}

	return err
}

// DeleteCache is API call with trace log
func (t *WebAccelTracer) DeleteCache(ctx context.Context, param *sacloud.WebAccelDeleteCacheRequest) ([]*sacloud.WebAccelDeleteCacheResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("param", param),
	))
	defer func() {
		span.End()
	}()

	resultResults, err := t.Internal.DeleteCache(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultResults", resultResults))

	}

	return resultResults, err
}

/*************************************************
* ZoneTracer
*************************************************/

// ZoneTracer is for trace ZoneOp operations
type ZoneTracer struct {
	Internal sacloud.ZoneAPI
}

// NewZoneTracer creates new ZoneTracer instance
func NewZoneTracer(in sacloud.ZoneAPI) sacloud.ZoneAPI {
	return &ZoneTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ZoneTracer) Find(ctx context.Context, conditions *sacloud.FindCondition) (*sacloud.ZoneFindResult, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("conditions", conditions),
	))
	defer func() {
		span.End()
	}()

	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("result", result))

	}

	return result, err
}

// Read is API call with trace log
func (t *ZoneTracer) Read(ctx context.Context, id types.ID) (*sacloud.Zone, error) {
	var span trace.Span
	ctx, span = tracer.Start(ctx, "ArchiveAPI.Find", trace.WithAttributes(
		label.Any("id", id),
	))
	defer func() {
		span.End()
	}()

	resultZone, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(label.Any("resultZone", resultZone))

	}

	return resultZone, err
}
