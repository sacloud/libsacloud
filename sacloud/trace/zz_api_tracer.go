// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-tracer'; DO NOT EDIT

package sacloud

import (
	"context"
	"log"

	"github.com/sacloud/libsacloud/v2/sacloud"
	"github.com/sacloud/libsacloud/v2/sacloud/types"
)

/*************************************************
* ArchiveTracer
*************************************************/

// ArchiveTracer is for trace ArchiveOp operations
type ArchiveTracer struct {
	Internal sacloud.ArchiveAPI
}

// NewArchiveTracer creates new ArchiveTracer instance
func NewArchiveTracer(in sacloud.ArchiveAPI) sacloud.ArchiveAPI {
	return &ArchiveTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ArchiveTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ArchiveFindResult, error) {
	log.Println("[TRACE] ArchiveTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *ArchiveTracer) Create(ctx context.Context, zone string, param *sacloud.ArchiveCreateRequest) (*sacloud.ArchiveCreateResult, error) {
	log.Println("[TRACE] ArchiveTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// CreateBlank is API call with trace log
func (t *ArchiveTracer) CreateBlank(ctx context.Context, zone string, param *sacloud.ArchiveCreateBlankRequest) (*sacloud.ArchiveCreateBlankResult, error) {
	log.Println("[TRACE] ArchiveTracer.CreateBlank start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.CreateBlank: end")
	}()

	return t.Internal.CreateBlank(ctx, zone, param)
}

// Read is API call with trace log
func (t *ArchiveTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.ArchiveReadResult, error) {
	log.Println("[TRACE] ArchiveTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *ArchiveTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ArchiveUpdateRequest) (*sacloud.ArchiveUpdateResult, error) {
	log.Println("[TRACE] ArchiveTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *ArchiveTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] ArchiveTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// OpenFTP is API call with trace log
func (t *ArchiveTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.ArchiveOpenFTPResult, error) {
	log.Println("[TRACE] ArchiveTracer.OpenFTP start:	args => [", "zone=", zone, "id=", id, "openOption=", openOption, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.OpenFTP: end")
	}()

	return t.Internal.OpenFTP(ctx, zone, id, openOption)
}

// CloseFTP is API call with trace log
func (t *ArchiveTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] ArchiveTracer.CloseFTP start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.CloseFTP: end")
	}()

	return t.Internal.CloseFTP(ctx, zone, id)
}

/*************************************************
* BridgeTracer
*************************************************/

// BridgeTracer is for trace BridgeOp operations
type BridgeTracer struct {
	Internal sacloud.BridgeAPI
}

// NewBridgeTracer creates new BridgeTracer instance
func NewBridgeTracer(in sacloud.BridgeAPI) sacloud.BridgeAPI {
	return &BridgeTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *BridgeTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.BridgeFindResult, error) {
	log.Println("[TRACE] BridgeTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] BridgeTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *BridgeTracer) Create(ctx context.Context, zone string, param *sacloud.BridgeCreateRequest) (*sacloud.BridgeCreateResult, error) {
	log.Println("[TRACE] BridgeTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] BridgeTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *BridgeTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.BridgeReadResult, error) {
	log.Println("[TRACE] BridgeTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] BridgeTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *BridgeTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.BridgeUpdateRequest) (*sacloud.BridgeUpdateResult, error) {
	log.Println("[TRACE] BridgeTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] BridgeTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *BridgeTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] BridgeTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] BridgeTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

/*************************************************
* CDROMTracer
*************************************************/

// CDROMTracer is for trace CDROMOp operations
type CDROMTracer struct {
	Internal sacloud.CDROMAPI
}

// NewCDROMTracer creates new CDROMTracer instance
func NewCDROMTracer(in sacloud.CDROMAPI) sacloud.CDROMAPI {
	return &CDROMTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *CDROMTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.CDROMFindResult, error) {
	log.Println("[TRACE] CDROMTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *CDROMTracer) Create(ctx context.Context, zone string, param *sacloud.CDROMCreateRequest) (*sacloud.CDROMCreateResult, error) {
	log.Println("[TRACE] CDROMTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *CDROMTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.CDROMReadResult, error) {
	log.Println("[TRACE] CDROMTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *CDROMTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.CDROMUpdateRequest) (*sacloud.CDROMUpdateResult, error) {
	log.Println("[TRACE] CDROMTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *CDROMTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] CDROMTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// OpenFTP is API call with trace log
func (t *CDROMTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.CDROMOpenFTPResult, error) {
	log.Println("[TRACE] CDROMTracer.OpenFTP start:	args => [", "zone=", zone, "id=", id, "openOption=", openOption, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.OpenFTP: end")
	}()

	return t.Internal.OpenFTP(ctx, zone, id, openOption)
}

// CloseFTP is API call with trace log
func (t *CDROMTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] CDROMTracer.CloseFTP start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.CloseFTP: end")
	}()

	return t.Internal.CloseFTP(ctx, zone, id)
}

/*************************************************
* DiskTracer
*************************************************/

// DiskTracer is for trace DiskOp operations
type DiskTracer struct {
	Internal sacloud.DiskAPI
}

// NewDiskTracer creates new DiskTracer instance
func NewDiskTracer(in sacloud.DiskAPI) sacloud.DiskAPI {
	return &DiskTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *DiskTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.DiskFindResult, error) {
	log.Println("[TRACE] DiskTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *DiskTracer) Create(ctx context.Context, zone string, param *sacloud.DiskCreateRequest) (*sacloud.DiskCreateResult, error) {
	log.Println("[TRACE] DiskTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// CreateDistantly is API call with trace log
func (t *DiskTracer) CreateDistantly(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, distantFrom []types.ID) (*sacloud.DiskCreateDistantlyResult, error) {
	log.Println("[TRACE] DiskTracer.CreateDistantly start:	args => [", "zone=", zone, "createParam=", createParam, "distantFrom=", distantFrom, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.CreateDistantly: end")
	}()

	return t.Internal.CreateDistantly(ctx, zone, createParam, distantFrom)
}

// Config is API call with trace log
func (t *DiskTracer) Config(ctx context.Context, zone string, id types.ID, edit *sacloud.DiskEditRequest) error {
	log.Println("[TRACE] DiskTracer.Config start:	args => [", "zone=", zone, "id=", id, "edit=", edit, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Config: end")
	}()

	return t.Internal.Config(ctx, zone, id, edit)
}

// CreateWithConfig is API call with trace log
func (t *DiskTracer) CreateWithConfig(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, editParam *sacloud.DiskEditRequest, bootAtAvailable bool) (*sacloud.DiskCreateWithConfigResult, error) {
	log.Println("[TRACE] DiskTracer.CreateWithConfig start:	args => [", "zone=", zone, "createParam=", createParam, "editParam=", editParam, "bootAtAvailable=", bootAtAvailable, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.CreateWithConfig: end")
	}()

	return t.Internal.CreateWithConfig(ctx, zone, createParam, editParam, bootAtAvailable)
}

// CreateWithConfigDistantly is API call with trace log
func (t *DiskTracer) CreateWithConfigDistantly(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, editParam *sacloud.DiskEditRequest, bootAtAvailable bool, distantFrom []types.ID) (*sacloud.DiskCreateWithConfigDistantlyResult, error) {
	log.Println("[TRACE] DiskTracer.CreateWithConfigDistantly start:	args => [", "zone=", zone, "createParam=", createParam, "editParam=", editParam, "bootAtAvailable=", bootAtAvailable, "distantFrom=", distantFrom, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.CreateWithConfigDistantly: end")
	}()

	return t.Internal.CreateWithConfigDistantly(ctx, zone, createParam, editParam, bootAtAvailable, distantFrom)
}

// ToBlank is API call with trace log
func (t *DiskTracer) ToBlank(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] DiskTracer.ToBlank start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.ToBlank: end")
	}()

	return t.Internal.ToBlank(ctx, zone, id)
}

// ResizePartition is API call with trace log
func (t *DiskTracer) ResizePartition(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] DiskTracer.ResizePartition start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.ResizePartition: end")
	}()

	return t.Internal.ResizePartition(ctx, zone, id)
}

// ConnectToServer is API call with trace log
func (t *DiskTracer) ConnectToServer(ctx context.Context, zone string, id types.ID, serverID types.ID) error {
	log.Println("[TRACE] DiskTracer.ConnectToServer start:	args => [", "zone=", zone, "id=", id, "serverID=", serverID, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.ConnectToServer: end")
	}()

	return t.Internal.ConnectToServer(ctx, zone, id, serverID)
}

// DisconnectFromServer is API call with trace log
func (t *DiskTracer) DisconnectFromServer(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] DiskTracer.DisconnectFromServer start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.DisconnectFromServer: end")
	}()

	return t.Internal.DisconnectFromServer(ctx, zone, id)
}

// InstallDistantFrom is API call with trace log
func (t *DiskTracer) InstallDistantFrom(ctx context.Context, zone string, id types.ID, installParam *sacloud.DiskInstallRequest, distantFrom []types.ID) (*sacloud.DiskInstallDistantFromResult, error) {
	log.Println("[TRACE] DiskTracer.InstallDistantFrom start:	args => [", "zone=", zone, "id=", id, "installParam=", installParam, "distantFrom=", distantFrom, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.InstallDistantFrom: end")
	}()

	return t.Internal.InstallDistantFrom(ctx, zone, id, installParam, distantFrom)
}

// Install is API call with trace log
func (t *DiskTracer) Install(ctx context.Context, zone string, id types.ID, installParam *sacloud.DiskInstallRequest) (*sacloud.DiskInstallResult, error) {
	log.Println("[TRACE] DiskTracer.Install start:	args => [", "zone=", zone, "id=", id, "installParam=", installParam, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Install: end")
	}()

	return t.Internal.Install(ctx, zone, id, installParam)
}

// Read is API call with trace log
func (t *DiskTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.DiskReadResult, error) {
	log.Println("[TRACE] DiskTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *DiskTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.DiskUpdateRequest) (*sacloud.DiskUpdateResult, error) {
	log.Println("[TRACE] DiskTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *DiskTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] DiskTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Monitor is API call with trace log
func (t *DiskTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.DiskMonitorResult, error) {
	log.Println("[TRACE] DiskTracer.Monitor start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Monitor: end")
	}()

	return t.Internal.Monitor(ctx, zone, id, condition)
}

/*************************************************
* GSLBTracer
*************************************************/

// GSLBTracer is for trace GSLBOp operations
type GSLBTracer struct {
	Internal sacloud.GSLBAPI
}

// NewGSLBTracer creates new GSLBTracer instance
func NewGSLBTracer(in sacloud.GSLBAPI) sacloud.GSLBAPI {
	return &GSLBTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *GSLBTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.GSLBFindResult, error) {
	log.Println("[TRACE] GSLBTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *GSLBTracer) Create(ctx context.Context, zone string, param *sacloud.GSLBCreateRequest) (*sacloud.GSLBCreateResult, error) {
	log.Println("[TRACE] GSLBTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *GSLBTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.GSLBReadResult, error) {
	log.Println("[TRACE] GSLBTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *GSLBTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.GSLBUpdateRequest) (*sacloud.GSLBUpdateResult, error) {
	log.Println("[TRACE] GSLBTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *GSLBTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] GSLBTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

/*************************************************
* InterfaceTracer
*************************************************/

// InterfaceTracer is for trace InterfaceOp operations
type InterfaceTracer struct {
	Internal sacloud.InterfaceAPI
}

// NewInterfaceTracer creates new InterfaceTracer instance
func NewInterfaceTracer(in sacloud.InterfaceAPI) sacloud.InterfaceAPI {
	return &InterfaceTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *InterfaceTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.InterfaceFindResult, error) {
	log.Println("[TRACE] InterfaceTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *InterfaceTracer) Create(ctx context.Context, zone string, param *sacloud.InterfaceCreateRequest) (*sacloud.InterfaceCreateResult, error) {
	log.Println("[TRACE] InterfaceTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *InterfaceTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.InterfaceReadResult, error) {
	log.Println("[TRACE] InterfaceTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *InterfaceTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.InterfaceUpdateRequest) (*sacloud.InterfaceUpdateResult, error) {
	log.Println("[TRACE] InterfaceTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *InterfaceTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] InterfaceTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Monitor is API call with trace log
func (t *InterfaceTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceMonitorResult, error) {
	log.Println("[TRACE] InterfaceTracer.Monitor start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.Monitor: end")
	}()

	return t.Internal.Monitor(ctx, zone, id, condition)
}

// ConnectToSharedSegment is API call with trace log
func (t *InterfaceTracer) ConnectToSharedSegment(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] InterfaceTracer.ConnectToSharedSegment start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.ConnectToSharedSegment: end")
	}()

	return t.Internal.ConnectToSharedSegment(ctx, zone, id)
}

// ConnectToSwitch is API call with trace log
func (t *InterfaceTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, switchID types.ID) error {
	log.Println("[TRACE] InterfaceTracer.ConnectToSwitch start:	args => [", "zone=", zone, "id=", id, "switchID=", switchID, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.ConnectToSwitch: end")
	}()

	return t.Internal.ConnectToSwitch(ctx, zone, id, switchID)
}

// DisconnectFromSwitch is API call with trace log
func (t *InterfaceTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] InterfaceTracer.DisconnectFromSwitch start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.DisconnectFromSwitch: end")
	}()

	return t.Internal.DisconnectFromSwitch(ctx, zone, id)
}

// ConnectToPacketFilter is API call with trace log
func (t *InterfaceTracer) ConnectToPacketFilter(ctx context.Context, zone string, id types.ID, packetFilterID types.ID) error {
	log.Println("[TRACE] InterfaceTracer.ConnectToPacketFilter start:	args => [", "zone=", zone, "id=", id, "packetFilterID=", packetFilterID, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.ConnectToPacketFilter: end")
	}()

	return t.Internal.ConnectToPacketFilter(ctx, zone, id, packetFilterID)
}

// DisconnectFromPacketFilter is API call with trace log
func (t *InterfaceTracer) DisconnectFromPacketFilter(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] InterfaceTracer.DisconnectFromPacketFilter start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] InterfaceTracer.DisconnectFromPacketFilter: end")
	}()

	return t.Internal.DisconnectFromPacketFilter(ctx, zone, id)
}

/*************************************************
* InternetTracer
*************************************************/

// InternetTracer is for trace InternetOp operations
type InternetTracer struct {
	Internal sacloud.InternetAPI
}

// NewInternetTracer creates new InternetTracer instance
func NewInternetTracer(in sacloud.InternetAPI) sacloud.InternetAPI {
	return &InternetTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *InternetTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.InternetFindResult, error) {
	log.Println("[TRACE] InternetTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *InternetTracer) Create(ctx context.Context, zone string, param *sacloud.InternetCreateRequest) (*sacloud.InternetCreateResult, error) {
	log.Println("[TRACE] InternetTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *InternetTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.InternetReadResult, error) {
	log.Println("[TRACE] InternetTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *InternetTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.InternetUpdateRequest) (*sacloud.InternetUpdateResult, error) {
	log.Println("[TRACE] InternetTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *InternetTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] InternetTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// UpdateBandWidth is API call with trace log
func (t *InternetTracer) UpdateBandWidth(ctx context.Context, zone string, id types.ID, param *sacloud.InternetUpdateBandWidthRequest) (*sacloud.InternetUpdateBandWidthResult, error) {
	log.Println("[TRACE] InternetTracer.UpdateBandWidth start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.UpdateBandWidth: end")
	}()

	return t.Internal.UpdateBandWidth(ctx, zone, id, param)
}

// AddSubnet is API call with trace log
func (t *InternetTracer) AddSubnet(ctx context.Context, zone string, id types.ID, param *sacloud.InternetAddSubnetRequest) (*sacloud.InternetAddSubnetResult, error) {
	log.Println("[TRACE] InternetTracer.AddSubnet start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.AddSubnet: end")
	}()

	return t.Internal.AddSubnet(ctx, zone, id, param)
}

// UpdateSubnet is API call with trace log
func (t *InternetTracer) UpdateSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID, param *sacloud.InternetUpdateSubnetRequest) (*sacloud.InternetUpdateSubnetResult, error) {
	log.Println("[TRACE] InternetTracer.UpdateSubnet start:	args => [", "zone=", zone, "id=", id, "subnetID=", subnetID, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.UpdateSubnet: end")
	}()

	return t.Internal.UpdateSubnet(ctx, zone, id, subnetID, param)
}

// DeleteSubnet is API call with trace log
func (t *InternetTracer) DeleteSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID) error {
	log.Println("[TRACE] InternetTracer.DeleteSubnet start:	args => [", "zone=", zone, "id=", id, "subnetID=", subnetID, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.DeleteSubnet: end")
	}()

	return t.Internal.DeleteSubnet(ctx, zone, id, subnetID)
}

// Monitor is API call with trace log
func (t *InternetTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InternetMonitorResult, error) {
	log.Println("[TRACE] InternetTracer.Monitor start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] InternetTracer.Monitor: end")
	}()

	return t.Internal.Monitor(ctx, zone, id, condition)
}

/*************************************************
* LoadBalancerTracer
*************************************************/

// LoadBalancerTracer is for trace LoadBalancerOp operations
type LoadBalancerTracer struct {
	Internal sacloud.LoadBalancerAPI
}

// NewLoadBalancerTracer creates new LoadBalancerTracer instance
func NewLoadBalancerTracer(in sacloud.LoadBalancerAPI) sacloud.LoadBalancerAPI {
	return &LoadBalancerTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *LoadBalancerTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.LoadBalancerFindResult, error) {
	log.Println("[TRACE] LoadBalancerTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *LoadBalancerTracer) Create(ctx context.Context, zone string, param *sacloud.LoadBalancerCreateRequest) (*sacloud.LoadBalancerCreateResult, error) {
	log.Println("[TRACE] LoadBalancerTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *LoadBalancerTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.LoadBalancerReadResult, error) {
	log.Println("[TRACE] LoadBalancerTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *LoadBalancerTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.LoadBalancerUpdateRequest) (*sacloud.LoadBalancerUpdateResult, error) {
	log.Println("[TRACE] LoadBalancerTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *LoadBalancerTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Config is API call with trace log
func (t *LoadBalancerTracer) Config(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Config start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Config: end")
	}()

	return t.Internal.Config(ctx, zone, id)
}

// Boot is API call with trace log
func (t *LoadBalancerTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Boot start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Boot: end")
	}()

	return t.Internal.Boot(ctx, zone, id)
}

// Shutdown is API call with trace log
func (t *LoadBalancerTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	log.Println("[TRACE] LoadBalancerTracer.Shutdown start:	args => [", "zone=", zone, "id=", id, "shutdownOption=", shutdownOption, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Shutdown: end")
	}()

	return t.Internal.Shutdown(ctx, zone, id, shutdownOption)
}

// Reset is API call with trace log
func (t *LoadBalancerTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Reset start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Reset: end")
	}()

	return t.Internal.Reset(ctx, zone, id)
}

// MonitorInterface is API call with trace log
func (t *LoadBalancerTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.LoadBalancerMonitorInterfaceResult, error) {
	log.Println("[TRACE] LoadBalancerTracer.MonitorInterface start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.MonitorInterface: end")
	}()

	return t.Internal.MonitorInterface(ctx, zone, id, condition)
}

// Status is API call with trace log
func (t *LoadBalancerTracer) Status(ctx context.Context, zone string, id types.ID) (*sacloud.LoadBalancerStatusResult, error) {
	log.Println("[TRACE] LoadBalancerTracer.Status start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Status: end")
	}()

	return t.Internal.Status(ctx, zone, id)
}

/*************************************************
* NFSTracer
*************************************************/

// NFSTracer is for trace NFSOp operations
type NFSTracer struct {
	Internal sacloud.NFSAPI
}

// NewNFSTracer creates new NFSTracer instance
func NewNFSTracer(in sacloud.NFSAPI) sacloud.NFSAPI {
	return &NFSTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *NFSTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.NFSFindResult, error) {
	log.Println("[TRACE] NFSTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *NFSTracer) Create(ctx context.Context, zone string, param *sacloud.NFSCreateRequest) (*sacloud.NFSCreateResult, error) {
	log.Println("[TRACE] NFSTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *NFSTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.NFSReadResult, error) {
	log.Println("[TRACE] NFSTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *NFSTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.NFSUpdateRequest) (*sacloud.NFSUpdateResult, error) {
	log.Println("[TRACE] NFSTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *NFSTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NFSTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Boot is API call with trace log
func (t *NFSTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NFSTracer.Boot start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Boot: end")
	}()

	return t.Internal.Boot(ctx, zone, id)
}

// Shutdown is API call with trace log
func (t *NFSTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	log.Println("[TRACE] NFSTracer.Shutdown start:	args => [", "zone=", zone, "id=", id, "shutdownOption=", shutdownOption, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Shutdown: end")
	}()

	return t.Internal.Shutdown(ctx, zone, id, shutdownOption)
}

// Reset is API call with trace log
func (t *NFSTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NFSTracer.Reset start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Reset: end")
	}()

	return t.Internal.Reset(ctx, zone, id)
}

// MonitorFreeDiskSize is API call with trace log
func (t *NFSTracer) MonitorFreeDiskSize(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.NFSMonitorFreeDiskSizeResult, error) {
	log.Println("[TRACE] NFSTracer.MonitorFreeDiskSize start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.MonitorFreeDiskSize: end")
	}()

	return t.Internal.MonitorFreeDiskSize(ctx, zone, id, condition)
}

// MonitorInterface is API call with trace log
func (t *NFSTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.NFSMonitorInterfaceResult, error) {
	log.Println("[TRACE] NFSTracer.MonitorInterface start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.MonitorInterface: end")
	}()

	return t.Internal.MonitorInterface(ctx, zone, id, condition)
}

/*************************************************
* NoteTracer
*************************************************/

// NoteTracer is for trace NoteOp operations
type NoteTracer struct {
	Internal sacloud.NoteAPI
}

// NewNoteTracer creates new NoteTracer instance
func NewNoteTracer(in sacloud.NoteAPI) sacloud.NoteAPI {
	return &NoteTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *NoteTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.NoteFindResult, error) {
	log.Println("[TRACE] NoteTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *NoteTracer) Create(ctx context.Context, zone string, param *sacloud.NoteCreateRequest) (*sacloud.NoteCreateResult, error) {
	log.Println("[TRACE] NoteTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *NoteTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.NoteReadResult, error) {
	log.Println("[TRACE] NoteTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *NoteTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.NoteUpdateRequest) (*sacloud.NoteUpdateResult, error) {
	log.Println("[TRACE] NoteTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *NoteTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NoteTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

/*************************************************
* PacketFilterTracer
*************************************************/

// PacketFilterTracer is for trace PacketFilterOp operations
type PacketFilterTracer struct {
	Internal sacloud.PacketFilterAPI
}

// NewPacketFilterTracer creates new PacketFilterTracer instance
func NewPacketFilterTracer(in sacloud.PacketFilterAPI) sacloud.PacketFilterAPI {
	return &PacketFilterTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *PacketFilterTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.PacketFilterFindResult, error) {
	log.Println("[TRACE] PacketFilterTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] PacketFilterTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *PacketFilterTracer) Create(ctx context.Context, zone string, param *sacloud.PacketFilterCreateRequest) (*sacloud.PacketFilterCreateResult, error) {
	log.Println("[TRACE] PacketFilterTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] PacketFilterTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *PacketFilterTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.PacketFilterReadResult, error) {
	log.Println("[TRACE] PacketFilterTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] PacketFilterTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *PacketFilterTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.PacketFilterUpdateRequest) (*sacloud.PacketFilterUpdateResult, error) {
	log.Println("[TRACE] PacketFilterTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] PacketFilterTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *PacketFilterTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] PacketFilterTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] PacketFilterTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

/*************************************************
* ServerTracer
*************************************************/

// ServerTracer is for trace ServerOp operations
type ServerTracer struct {
	Internal sacloud.ServerAPI
}

// NewServerTracer creates new ServerTracer instance
func NewServerTracer(in sacloud.ServerAPI) sacloud.ServerAPI {
	return &ServerTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ServerTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ServerFindResult, error) {
	log.Println("[TRACE] ServerTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *ServerTracer) Create(ctx context.Context, zone string, param *sacloud.ServerCreateRequest) (*sacloud.ServerCreateResult, error) {
	log.Println("[TRACE] ServerTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *ServerTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.ServerReadResult, error) {
	log.Println("[TRACE] ServerTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *ServerTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ServerUpdateRequest) (*sacloud.ServerUpdateResult, error) {
	log.Println("[TRACE] ServerTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *ServerTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] ServerTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// ChangePlan is API call with trace log
func (t *ServerTracer) ChangePlan(ctx context.Context, zone string, id types.ID, plan *sacloud.ServerChangePlanRequest) (*sacloud.ServerChangePlanResult, error) {
	log.Println("[TRACE] ServerTracer.ChangePlan start:	args => [", "zone=", zone, "id=", id, "plan=", plan, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.ChangePlan: end")
	}()

	return t.Internal.ChangePlan(ctx, zone, id, plan)
}

// InsertCDROM is API call with trace log
func (t *ServerTracer) InsertCDROM(ctx context.Context, zone string, id types.ID, insertParam *sacloud.InsertCDROMRequest) error {
	log.Println("[TRACE] ServerTracer.InsertCDROM start:	args => [", "zone=", zone, "id=", id, "insertParam=", insertParam, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.InsertCDROM: end")
	}()

	return t.Internal.InsertCDROM(ctx, zone, id, insertParam)
}

// EjectCDROM is API call with trace log
func (t *ServerTracer) EjectCDROM(ctx context.Context, zone string, id types.ID, insertParam *sacloud.EjectCDROMRequest) error {
	log.Println("[TRACE] ServerTracer.EjectCDROM start:	args => [", "zone=", zone, "id=", id, "insertParam=", insertParam, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.EjectCDROM: end")
	}()

	return t.Internal.EjectCDROM(ctx, zone, id, insertParam)
}

// Boot is API call with trace log
func (t *ServerTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] ServerTracer.Boot start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Boot: end")
	}()

	return t.Internal.Boot(ctx, zone, id)
}

// Shutdown is API call with trace log
func (t *ServerTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	log.Println("[TRACE] ServerTracer.Shutdown start:	args => [", "zone=", zone, "id=", id, "shutdownOption=", shutdownOption, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Shutdown: end")
	}()

	return t.Internal.Shutdown(ctx, zone, id, shutdownOption)
}

// Reset is API call with trace log
func (t *ServerTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] ServerTracer.Reset start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Reset: end")
	}()

	return t.Internal.Reset(ctx, zone, id)
}

// Monitor is API call with trace log
func (t *ServerTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.ServerMonitorResult, error) {
	log.Println("[TRACE] ServerTracer.Monitor start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] ServerTracer.Monitor: end")
	}()

	return t.Internal.Monitor(ctx, zone, id, condition)
}

/*************************************************
* SIMTracer
*************************************************/

// SIMTracer is for trace SIMOp operations
type SIMTracer struct {
	Internal sacloud.SIMAPI
}

// NewSIMTracer creates new SIMTracer instance
func NewSIMTracer(in sacloud.SIMAPI) sacloud.SIMAPI {
	return &SIMTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SIMTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.SIMFindResult, error) {
	log.Println("[TRACE] SIMTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *SIMTracer) Create(ctx context.Context, zone string, param *sacloud.SIMCreateRequest) (*sacloud.SIMCreateResult, error) {
	log.Println("[TRACE] SIMTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *SIMTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.SIMReadResult, error) {
	log.Println("[TRACE] SIMTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *SIMTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.SIMUpdateRequest) (*sacloud.SIMUpdateResult, error) {
	log.Println("[TRACE] SIMTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *SIMTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SIMTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Activate is API call with trace log
func (t *SIMTracer) Activate(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SIMTracer.Activate start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Activate: end")
	}()

	return t.Internal.Activate(ctx, zone, id)
}

// Deactivate is API call with trace log
func (t *SIMTracer) Deactivate(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SIMTracer.Deactivate start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Deactivate: end")
	}()

	return t.Internal.Deactivate(ctx, zone, id)
}

// AssignIP is API call with trace log
func (t *SIMTracer) AssignIP(ctx context.Context, zone string, id types.ID, param *sacloud.SIMAssignIPRequest) error {
	log.Println("[TRACE] SIMTracer.AssignIP start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.AssignIP: end")
	}()

	return t.Internal.AssignIP(ctx, zone, id, param)
}

// ClearIP is API call with trace log
func (t *SIMTracer) ClearIP(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SIMTracer.ClearIP start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.ClearIP: end")
	}()

	return t.Internal.ClearIP(ctx, zone, id)
}

// IMEILock is API call with trace log
func (t *SIMTracer) IMEILock(ctx context.Context, zone string, id types.ID, param *sacloud.SIMIMEILockRequest) error {
	log.Println("[TRACE] SIMTracer.IMEILock start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.IMEILock: end")
	}()

	return t.Internal.IMEILock(ctx, zone, id, param)
}

// IMEIUnlock is API call with trace log
func (t *SIMTracer) IMEIUnlock(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SIMTracer.IMEIUnlock start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.IMEIUnlock: end")
	}()

	return t.Internal.IMEIUnlock(ctx, zone, id)
}

// Logs is API call with trace log
func (t *SIMTracer) Logs(ctx context.Context, zone string, id types.ID) (*sacloud.SIMLogsResult, error) {
	log.Println("[TRACE] SIMTracer.Logs start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.Logs: end")
	}()

	return t.Internal.Logs(ctx, zone, id)
}

// GetNetworkOperator is API call with trace log
func (t *SIMTracer) GetNetworkOperator(ctx context.Context, zone string, id types.ID) (*sacloud.SIMGetNetworkOperatorResult, error) {
	log.Println("[TRACE] SIMTracer.GetNetworkOperator start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.GetNetworkOperator: end")
	}()

	return t.Internal.GetNetworkOperator(ctx, zone, id)
}

// SetNetworkOperator is API call with trace log
func (t *SIMTracer) SetNetworkOperator(ctx context.Context, zone string, id types.ID, configs *sacloud.SIMNetworkOperatorConfigs) error {
	log.Println("[TRACE] SIMTracer.SetNetworkOperator start:	args => [", "zone=", zone, "id=", id, "configs=", configs, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.SetNetworkOperator: end")
	}()

	return t.Internal.SetNetworkOperator(ctx, zone, id, configs)
}

// MonitorSIM is API call with trace log
func (t *SIMTracer) MonitorSIM(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.SIMMonitorSIMResult, error) {
	log.Println("[TRACE] SIMTracer.MonitorSIM start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] SIMTracer.MonitorSIM: end")
	}()

	return t.Internal.MonitorSIM(ctx, zone, id, condition)
}

/*************************************************
* SwitchTracer
*************************************************/

// SwitchTracer is for trace SwitchOp operations
type SwitchTracer struct {
	Internal sacloud.SwitchAPI
}

// NewSwitchTracer creates new SwitchTracer instance
func NewSwitchTracer(in sacloud.SwitchAPI) sacloud.SwitchAPI {
	return &SwitchTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SwitchTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.SwitchFindResult, error) {
	log.Println("[TRACE] SwitchTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *SwitchTracer) Create(ctx context.Context, zone string, param *sacloud.SwitchCreateRequest) (*sacloud.SwitchCreateResult, error) {
	log.Println("[TRACE] SwitchTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *SwitchTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.SwitchReadResult, error) {
	log.Println("[TRACE] SwitchTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *SwitchTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.SwitchUpdateRequest) (*sacloud.SwitchUpdateResult, error) {
	log.Println("[TRACE] SwitchTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *SwitchTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SwitchTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// ConnectToBridge is API call with trace log
func (t *SwitchTracer) ConnectToBridge(ctx context.Context, zone string, id types.ID, bridgeID types.ID) error {
	log.Println("[TRACE] SwitchTracer.ConnectToBridge start:	args => [", "zone=", zone, "id=", id, "bridgeID=", bridgeID, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.ConnectToBridge: end")
	}()

	return t.Internal.ConnectToBridge(ctx, zone, id, bridgeID)
}

// DisconnectFromBridge is API call with trace log
func (t *SwitchTracer) DisconnectFromBridge(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SwitchTracer.DisconnectFromBridge start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.DisconnectFromBridge: end")
	}()

	return t.Internal.DisconnectFromBridge(ctx, zone, id)
}

/*************************************************
* VPCRouterTracer
*************************************************/

// VPCRouterTracer is for trace VPCRouterOp operations
type VPCRouterTracer struct {
	Internal sacloud.VPCRouterAPI
}

// NewVPCRouterTracer creates new VPCRouterTracer instance
func NewVPCRouterTracer(in sacloud.VPCRouterAPI) sacloud.VPCRouterAPI {
	return &VPCRouterTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *VPCRouterTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.VPCRouterFindResult, error) {
	log.Println("[TRACE] VPCRouterTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *VPCRouterTracer) Create(ctx context.Context, zone string, param *sacloud.VPCRouterCreateRequest) (*sacloud.VPCRouterCreateResult, error) {
	log.Println("[TRACE] VPCRouterTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *VPCRouterTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.VPCRouterReadResult, error) {
	log.Println("[TRACE] VPCRouterTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *VPCRouterTracer) Update(ctx context.Context, zone string, id types.ID, param *sacloud.VPCRouterUpdateRequest) (*sacloud.VPCRouterUpdateResult, error) {
	log.Println("[TRACE] VPCRouterTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *VPCRouterTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] VPCRouterTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Config is API call with trace log
func (t *VPCRouterTracer) Config(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] VPCRouterTracer.Config start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Config: end")
	}()

	return t.Internal.Config(ctx, zone, id)
}

// Boot is API call with trace log
func (t *VPCRouterTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] VPCRouterTracer.Boot start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Boot: end")
	}()

	return t.Internal.Boot(ctx, zone, id)
}

// Shutdown is API call with trace log
func (t *VPCRouterTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	log.Println("[TRACE] VPCRouterTracer.Shutdown start:	args => [", "zone=", zone, "id=", id, "shutdownOption=", shutdownOption, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Shutdown: end")
	}()

	return t.Internal.Shutdown(ctx, zone, id, shutdownOption)
}

// Reset is API call with trace log
func (t *VPCRouterTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] VPCRouterTracer.Reset start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.Reset: end")
	}()

	return t.Internal.Reset(ctx, zone, id)
}

// ConnectToSwitch is API call with trace log
func (t *VPCRouterTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, nicIndex int, switchID types.ID) error {
	log.Println("[TRACE] VPCRouterTracer.ConnectToSwitch start:	args => [", "zone=", zone, "id=", id, "nicIndex=", nicIndex, "switchID=", switchID, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.ConnectToSwitch: end")
	}()

	return t.Internal.ConnectToSwitch(ctx, zone, id, nicIndex, switchID)
}

// DisconnectFromSwitch is API call with trace log
func (t *VPCRouterTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID, nicIndex int) error {
	log.Println("[TRACE] VPCRouterTracer.DisconnectFromSwitch start:	args => [", "zone=", zone, "id=", id, "nicIndex=", nicIndex, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.DisconnectFromSwitch: end")
	}()

	return t.Internal.DisconnectFromSwitch(ctx, zone, id, nicIndex)
}

// MonitorInterface is API call with trace log
func (t *VPCRouterTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, index int, condition *sacloud.MonitorCondition) (*sacloud.VPCRouterMonitorInterfaceResult, error) {
	log.Println("[TRACE] VPCRouterTracer.MonitorInterface start:	args => [", "zone=", zone, "id=", id, "index=", index, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] VPCRouterTracer.MonitorInterface: end")
	}()

	return t.Internal.MonitorInterface(ctx, zone, id, index, condition)
}

/*************************************************
* ZoneTracer
*************************************************/

// ZoneTracer is for trace ZoneOp operations
type ZoneTracer struct {
	Internal sacloud.ZoneAPI
}

// NewZoneTracer creates new ZoneTracer instance
func NewZoneTracer(in sacloud.ZoneAPI) sacloud.ZoneAPI {
	return &ZoneTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ZoneTracer) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ZoneFindResult, error) {
	log.Println("[TRACE] ZoneTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] ZoneTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Read is API call with trace log
func (t *ZoneTracer) Read(ctx context.Context, zone string, id types.ID) (*sacloud.ZoneReadResult, error) {
	log.Println("[TRACE] ZoneTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ZoneTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}
