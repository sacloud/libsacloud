// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-stub'; DO NOT EDIT

package stub

import (
	"context"
	"log"

	"github.com/sacloud/libsacloud/v2/sacloud"
	"github.com/sacloud/libsacloud/v2/sacloud/types"
)

/*************************************************
* ArchiveStub
*************************************************/

// ArchiveFindStubResult is expected values of the Find operation
type ArchiveFindStubResult struct {
	Values *sacloud.ArchiveFindResult
	Err    error
}

// ArchiveCreateStubResult is expected values of the Create operation
type ArchiveCreateStubResult struct {
	Values *sacloud.ArchiveCreateResult
	Err    error
}

// ArchiveCreateBlankStubResult is expected values of the CreateBlank operation
type ArchiveCreateBlankStubResult struct {
	Values *sacloud.ArchiveCreateBlankResult
	Err    error
}

// ArchiveReadStubResult is expected values of the Read operation
type ArchiveReadStubResult struct {
	Values *sacloud.ArchiveReadResult
	Err    error
}

// ArchiveUpdateStubResult is expected values of the Update operation
type ArchiveUpdateStubResult struct {
	Values *sacloud.ArchiveUpdateResult
	Err    error
}

// ArchiveDeleteStubResult is expected values of the Delete operation
type ArchiveDeleteStubResult struct {
	Err error
}

// ArchiveOpenFTPStubResult is expected values of the OpenFTP operation
type ArchiveOpenFTPStubResult struct {
	Values *sacloud.ArchiveOpenFTPResult
	Err    error
}

// ArchiveCloseFTPStubResult is expected values of the CloseFTP operation
type ArchiveCloseFTPStubResult struct {
	Err error
}

// ArchiveStub is for trace ArchiveOp operations
type ArchiveStub struct {
	FindStubResult        *ArchiveFindStubResult
	CreateStubResult      *ArchiveCreateStubResult
	CreateBlankStubResult *ArchiveCreateBlankStubResult
	ReadStubResult        *ArchiveReadStubResult
	UpdateStubResult      *ArchiveUpdateStubResult
	DeleteStubResult      *ArchiveDeleteStubResult
	OpenFTPStubResult     *ArchiveOpenFTPStubResult
	CloseFTPStubResult    *ArchiveCloseFTPStubResult
}

// NewArchiveStub creates new ArchiveStub instance
func NewArchiveStub(caller sacloud.APICaller) sacloud.ArchiveAPI {
	return &ArchiveStub{}
}

// Find is API call with trace log
func (s *ArchiveStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ArchiveFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("ArchiveStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *ArchiveStub) Create(ctx context.Context, zone string, param *sacloud.ArchiveCreateRequest) (*sacloud.ArchiveCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("ArchiveStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// CreateBlank is API call with trace log
func (s *ArchiveStub) CreateBlank(ctx context.Context, zone string, param *sacloud.ArchiveCreateBlankRequest) (*sacloud.ArchiveCreateBlankResult, error) {
	if s.CreateBlankStubResult == nil {
		log.Fatal("ArchiveStub.CreateBlankStubResult is not set")
	}
	return s.CreateBlankStubResult.Values, s.CreateBlankStubResult.Err
}

// Read is API call with trace log
func (s *ArchiveStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.ArchiveReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("ArchiveStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *ArchiveStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ArchiveUpdateRequest) (*sacloud.ArchiveUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("ArchiveStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *ArchiveStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("ArchiveStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// OpenFTP is API call with trace log
func (s *ArchiveStub) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.ArchiveOpenFTPResult, error) {
	if s.OpenFTPStubResult == nil {
		log.Fatal("ArchiveStub.OpenFTPStubResult is not set")
	}
	return s.OpenFTPStubResult.Values, s.OpenFTPStubResult.Err
}

// CloseFTP is API call with trace log
func (s *ArchiveStub) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	if s.CloseFTPStubResult == nil {
		log.Fatal("ArchiveStub.CloseFTPStubResult is not set")
	}
	return s.CloseFTPStubResult.Err
}

/*************************************************
* BridgeStub
*************************************************/

// BridgeFindStubResult is expected values of the Find operation
type BridgeFindStubResult struct {
	Values *sacloud.BridgeFindResult
	Err    error
}

// BridgeCreateStubResult is expected values of the Create operation
type BridgeCreateStubResult struct {
	Values *sacloud.BridgeCreateResult
	Err    error
}

// BridgeReadStubResult is expected values of the Read operation
type BridgeReadStubResult struct {
	Values *sacloud.BridgeReadResult
	Err    error
}

// BridgeUpdateStubResult is expected values of the Update operation
type BridgeUpdateStubResult struct {
	Values *sacloud.BridgeUpdateResult
	Err    error
}

// BridgeDeleteStubResult is expected values of the Delete operation
type BridgeDeleteStubResult struct {
	Err error
}

// BridgeStub is for trace BridgeOp operations
type BridgeStub struct {
	FindStubResult   *BridgeFindStubResult
	CreateStubResult *BridgeCreateStubResult
	ReadStubResult   *BridgeReadStubResult
	UpdateStubResult *BridgeUpdateStubResult
	DeleteStubResult *BridgeDeleteStubResult
}

// NewBridgeStub creates new BridgeStub instance
func NewBridgeStub(caller sacloud.APICaller) sacloud.BridgeAPI {
	return &BridgeStub{}
}

// Find is API call with trace log
func (s *BridgeStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.BridgeFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("BridgeStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *BridgeStub) Create(ctx context.Context, zone string, param *sacloud.BridgeCreateRequest) (*sacloud.BridgeCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("BridgeStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *BridgeStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.BridgeReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("BridgeStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *BridgeStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.BridgeUpdateRequest) (*sacloud.BridgeUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("BridgeStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *BridgeStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("BridgeStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

/*************************************************
* CDROMStub
*************************************************/

// CDROMFindStubResult is expected values of the Find operation
type CDROMFindStubResult struct {
	Values *sacloud.CDROMFindResult
	Err    error
}

// CDROMCreateStubResult is expected values of the Create operation
type CDROMCreateStubResult struct {
	Values *sacloud.CDROMCreateResult
	Err    error
}

// CDROMReadStubResult is expected values of the Read operation
type CDROMReadStubResult struct {
	Values *sacloud.CDROMReadResult
	Err    error
}

// CDROMUpdateStubResult is expected values of the Update operation
type CDROMUpdateStubResult struct {
	Values *sacloud.CDROMUpdateResult
	Err    error
}

// CDROMDeleteStubResult is expected values of the Delete operation
type CDROMDeleteStubResult struct {
	Err error
}

// CDROMOpenFTPStubResult is expected values of the OpenFTP operation
type CDROMOpenFTPStubResult struct {
	Values *sacloud.CDROMOpenFTPResult
	Err    error
}

// CDROMCloseFTPStubResult is expected values of the CloseFTP operation
type CDROMCloseFTPStubResult struct {
	Err error
}

// CDROMStub is for trace CDROMOp operations
type CDROMStub struct {
	FindStubResult     *CDROMFindStubResult
	CreateStubResult   *CDROMCreateStubResult
	ReadStubResult     *CDROMReadStubResult
	UpdateStubResult   *CDROMUpdateStubResult
	DeleteStubResult   *CDROMDeleteStubResult
	OpenFTPStubResult  *CDROMOpenFTPStubResult
	CloseFTPStubResult *CDROMCloseFTPStubResult
}

// NewCDROMStub creates new CDROMStub instance
func NewCDROMStub(caller sacloud.APICaller) sacloud.CDROMAPI {
	return &CDROMStub{}
}

// Find is API call with trace log
func (s *CDROMStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.CDROMFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("CDROMStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *CDROMStub) Create(ctx context.Context, zone string, param *sacloud.CDROMCreateRequest) (*sacloud.CDROMCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("CDROMStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *CDROMStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.CDROMReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("CDROMStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *CDROMStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.CDROMUpdateRequest) (*sacloud.CDROMUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("CDROMStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *CDROMStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("CDROMStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// OpenFTP is API call with trace log
func (s *CDROMStub) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.CDROMOpenFTPResult, error) {
	if s.OpenFTPStubResult == nil {
		log.Fatal("CDROMStub.OpenFTPStubResult is not set")
	}
	return s.OpenFTPStubResult.Values, s.OpenFTPStubResult.Err
}

// CloseFTP is API call with trace log
func (s *CDROMStub) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	if s.CloseFTPStubResult == nil {
		log.Fatal("CDROMStub.CloseFTPStubResult is not set")
	}
	return s.CloseFTPStubResult.Err
}

/*************************************************
* DiskStub
*************************************************/

// DiskFindStubResult is expected values of the Find operation
type DiskFindStubResult struct {
	Values *sacloud.DiskFindResult
	Err    error
}

// DiskCreateStubResult is expected values of the Create operation
type DiskCreateStubResult struct {
	Values *sacloud.DiskCreateResult
	Err    error
}

// DiskCreateDistantlyStubResult is expected values of the CreateDistantly operation
type DiskCreateDistantlyStubResult struct {
	Values *sacloud.DiskCreateDistantlyResult
	Err    error
}

// DiskConfigStubResult is expected values of the Config operation
type DiskConfigStubResult struct {
	Err error
}

// DiskCreateWithConfigStubResult is expected values of the CreateWithConfig operation
type DiskCreateWithConfigStubResult struct {
	Values *sacloud.DiskCreateWithConfigResult
	Err    error
}

// DiskCreateWithConfigDistantlyStubResult is expected values of the CreateWithConfigDistantly operation
type DiskCreateWithConfigDistantlyStubResult struct {
	Values *sacloud.DiskCreateWithConfigDistantlyResult
	Err    error
}

// DiskToBlankStubResult is expected values of the ToBlank operation
type DiskToBlankStubResult struct {
	Err error
}

// DiskResizePartitionStubResult is expected values of the ResizePartition operation
type DiskResizePartitionStubResult struct {
	Err error
}

// DiskConnectToServerStubResult is expected values of the ConnectToServer operation
type DiskConnectToServerStubResult struct {
	Err error
}

// DiskDisconnectFromServerStubResult is expected values of the DisconnectFromServer operation
type DiskDisconnectFromServerStubResult struct {
	Err error
}

// DiskInstallDistantFromStubResult is expected values of the InstallDistantFrom operation
type DiskInstallDistantFromStubResult struct {
	Values *sacloud.DiskInstallDistantFromResult
	Err    error
}

// DiskInstallStubResult is expected values of the Install operation
type DiskInstallStubResult struct {
	Values *sacloud.DiskInstallResult
	Err    error
}

// DiskReadStubResult is expected values of the Read operation
type DiskReadStubResult struct {
	Values *sacloud.DiskReadResult
	Err    error
}

// DiskUpdateStubResult is expected values of the Update operation
type DiskUpdateStubResult struct {
	Values *sacloud.DiskUpdateResult
	Err    error
}

// DiskDeleteStubResult is expected values of the Delete operation
type DiskDeleteStubResult struct {
	Err error
}

// DiskMonitorStubResult is expected values of the Monitor operation
type DiskMonitorStubResult struct {
	Values *sacloud.DiskMonitorResult
	Err    error
}

// DiskStub is for trace DiskOp operations
type DiskStub struct {
	FindStubResult                      *DiskFindStubResult
	CreateStubResult                    *DiskCreateStubResult
	CreateDistantlyStubResult           *DiskCreateDistantlyStubResult
	ConfigStubResult                    *DiskConfigStubResult
	CreateWithConfigStubResult          *DiskCreateWithConfigStubResult
	CreateWithConfigDistantlyStubResult *DiskCreateWithConfigDistantlyStubResult
	ToBlankStubResult                   *DiskToBlankStubResult
	ResizePartitionStubResult           *DiskResizePartitionStubResult
	ConnectToServerStubResult           *DiskConnectToServerStubResult
	DisconnectFromServerStubResult      *DiskDisconnectFromServerStubResult
	InstallDistantFromStubResult        *DiskInstallDistantFromStubResult
	InstallStubResult                   *DiskInstallStubResult
	ReadStubResult                      *DiskReadStubResult
	UpdateStubResult                    *DiskUpdateStubResult
	DeleteStubResult                    *DiskDeleteStubResult
	MonitorStubResult                   *DiskMonitorStubResult
}

// NewDiskStub creates new DiskStub instance
func NewDiskStub(caller sacloud.APICaller) sacloud.DiskAPI {
	return &DiskStub{}
}

// Find is API call with trace log
func (s *DiskStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.DiskFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("DiskStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *DiskStub) Create(ctx context.Context, zone string, param *sacloud.DiskCreateRequest) (*sacloud.DiskCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("DiskStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// CreateDistantly is API call with trace log
func (s *DiskStub) CreateDistantly(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, distantFrom []types.ID) (*sacloud.DiskCreateDistantlyResult, error) {
	if s.CreateDistantlyStubResult == nil {
		log.Fatal("DiskStub.CreateDistantlyStubResult is not set")
	}
	return s.CreateDistantlyStubResult.Values, s.CreateDistantlyStubResult.Err
}

// Config is API call with trace log
func (s *DiskStub) Config(ctx context.Context, zone string, id types.ID, edit *sacloud.DiskEditRequest) error {
	if s.ConfigStubResult == nil {
		log.Fatal("DiskStub.ConfigStubResult is not set")
	}
	return s.ConfigStubResult.Err
}

// CreateWithConfig is API call with trace log
func (s *DiskStub) CreateWithConfig(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, editParam *sacloud.DiskEditRequest, bootAtAvailable bool) (*sacloud.DiskCreateWithConfigResult, error) {
	if s.CreateWithConfigStubResult == nil {
		log.Fatal("DiskStub.CreateWithConfigStubResult is not set")
	}
	return s.CreateWithConfigStubResult.Values, s.CreateWithConfigStubResult.Err
}

// CreateWithConfigDistantly is API call with trace log
func (s *DiskStub) CreateWithConfigDistantly(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, editParam *sacloud.DiskEditRequest, bootAtAvailable bool, distantFrom []types.ID) (*sacloud.DiskCreateWithConfigDistantlyResult, error) {
	if s.CreateWithConfigDistantlyStubResult == nil {
		log.Fatal("DiskStub.CreateWithConfigDistantlyStubResult is not set")
	}
	return s.CreateWithConfigDistantlyStubResult.Values, s.CreateWithConfigDistantlyStubResult.Err
}

// ToBlank is API call with trace log
func (s *DiskStub) ToBlank(ctx context.Context, zone string, id types.ID) error {
	if s.ToBlankStubResult == nil {
		log.Fatal("DiskStub.ToBlankStubResult is not set")
	}
	return s.ToBlankStubResult.Err
}

// ResizePartition is API call with trace log
func (s *DiskStub) ResizePartition(ctx context.Context, zone string, id types.ID) error {
	if s.ResizePartitionStubResult == nil {
		log.Fatal("DiskStub.ResizePartitionStubResult is not set")
	}
	return s.ResizePartitionStubResult.Err
}

// ConnectToServer is API call with trace log
func (s *DiskStub) ConnectToServer(ctx context.Context, zone string, id types.ID, serverID types.ID) error {
	if s.ConnectToServerStubResult == nil {
		log.Fatal("DiskStub.ConnectToServerStubResult is not set")
	}
	return s.ConnectToServerStubResult.Err
}

// DisconnectFromServer is API call with trace log
func (s *DiskStub) DisconnectFromServer(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromServerStubResult == nil {
		log.Fatal("DiskStub.DisconnectFromServerStubResult is not set")
	}
	return s.DisconnectFromServerStubResult.Err
}

// InstallDistantFrom is API call with trace log
func (s *DiskStub) InstallDistantFrom(ctx context.Context, zone string, id types.ID, installParam *sacloud.DiskInstallRequest, distantFrom []types.ID) (*sacloud.DiskInstallDistantFromResult, error) {
	if s.InstallDistantFromStubResult == nil {
		log.Fatal("DiskStub.InstallDistantFromStubResult is not set")
	}
	return s.InstallDistantFromStubResult.Values, s.InstallDistantFromStubResult.Err
}

// Install is API call with trace log
func (s *DiskStub) Install(ctx context.Context, zone string, id types.ID, installParam *sacloud.DiskInstallRequest) (*sacloud.DiskInstallResult, error) {
	if s.InstallStubResult == nil {
		log.Fatal("DiskStub.InstallStubResult is not set")
	}
	return s.InstallStubResult.Values, s.InstallStubResult.Err
}

// Read is API call with trace log
func (s *DiskStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.DiskReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("DiskStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *DiskStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.DiskUpdateRequest) (*sacloud.DiskUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("DiskStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *DiskStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("DiskStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// Monitor is API call with trace log
func (s *DiskStub) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.DiskMonitorResult, error) {
	if s.MonitorStubResult == nil {
		log.Fatal("DiskStub.MonitorStubResult is not set")
	}
	return s.MonitorStubResult.Values, s.MonitorStubResult.Err
}

/*************************************************
* GSLBStub
*************************************************/

// GSLBFindStubResult is expected values of the Find operation
type GSLBFindStubResult struct {
	Values *sacloud.GSLBFindResult
	Err    error
}

// GSLBCreateStubResult is expected values of the Create operation
type GSLBCreateStubResult struct {
	Values *sacloud.GSLBCreateResult
	Err    error
}

// GSLBReadStubResult is expected values of the Read operation
type GSLBReadStubResult struct {
	Values *sacloud.GSLBReadResult
	Err    error
}

// GSLBUpdateStubResult is expected values of the Update operation
type GSLBUpdateStubResult struct {
	Values *sacloud.GSLBUpdateResult
	Err    error
}

// GSLBDeleteStubResult is expected values of the Delete operation
type GSLBDeleteStubResult struct {
	Err error
}

// GSLBStub is for trace GSLBOp operations
type GSLBStub struct {
	FindStubResult   *GSLBFindStubResult
	CreateStubResult *GSLBCreateStubResult
	ReadStubResult   *GSLBReadStubResult
	UpdateStubResult *GSLBUpdateStubResult
	DeleteStubResult *GSLBDeleteStubResult
}

// NewGSLBStub creates new GSLBStub instance
func NewGSLBStub(caller sacloud.APICaller) sacloud.GSLBAPI {
	return &GSLBStub{}
}

// Find is API call with trace log
func (s *GSLBStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.GSLBFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("GSLBStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *GSLBStub) Create(ctx context.Context, zone string, param *sacloud.GSLBCreateRequest) (*sacloud.GSLBCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("GSLBStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *GSLBStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.GSLBReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("GSLBStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *GSLBStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.GSLBUpdateRequest) (*sacloud.GSLBUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("GSLBStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *GSLBStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("GSLBStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

/*************************************************
* InterfaceStub
*************************************************/

// InterfaceFindStubResult is expected values of the Find operation
type InterfaceFindStubResult struct {
	Values *sacloud.InterfaceFindResult
	Err    error
}

// InterfaceCreateStubResult is expected values of the Create operation
type InterfaceCreateStubResult struct {
	Values *sacloud.InterfaceCreateResult
	Err    error
}

// InterfaceReadStubResult is expected values of the Read operation
type InterfaceReadStubResult struct {
	Values *sacloud.InterfaceReadResult
	Err    error
}

// InterfaceUpdateStubResult is expected values of the Update operation
type InterfaceUpdateStubResult struct {
	Values *sacloud.InterfaceUpdateResult
	Err    error
}

// InterfaceDeleteStubResult is expected values of the Delete operation
type InterfaceDeleteStubResult struct {
	Err error
}

// InterfaceMonitorStubResult is expected values of the Monitor operation
type InterfaceMonitorStubResult struct {
	Values *sacloud.InterfaceMonitorResult
	Err    error
}

// InterfaceConnectToSharedSegmentStubResult is expected values of the ConnectToSharedSegment operation
type InterfaceConnectToSharedSegmentStubResult struct {
	Err error
}

// InterfaceConnectToSwitchStubResult is expected values of the ConnectToSwitch operation
type InterfaceConnectToSwitchStubResult struct {
	Err error
}

// InterfaceDisconnectFromSwitchStubResult is expected values of the DisconnectFromSwitch operation
type InterfaceDisconnectFromSwitchStubResult struct {
	Err error
}

// InterfaceConnectToPacketFilterStubResult is expected values of the ConnectToPacketFilter operation
type InterfaceConnectToPacketFilterStubResult struct {
	Err error
}

// InterfaceDisconnectFromPacketFilterStubResult is expected values of the DisconnectFromPacketFilter operation
type InterfaceDisconnectFromPacketFilterStubResult struct {
	Err error
}

// InterfaceStub is for trace InterfaceOp operations
type InterfaceStub struct {
	FindStubResult                       *InterfaceFindStubResult
	CreateStubResult                     *InterfaceCreateStubResult
	ReadStubResult                       *InterfaceReadStubResult
	UpdateStubResult                     *InterfaceUpdateStubResult
	DeleteStubResult                     *InterfaceDeleteStubResult
	MonitorStubResult                    *InterfaceMonitorStubResult
	ConnectToSharedSegmentStubResult     *InterfaceConnectToSharedSegmentStubResult
	ConnectToSwitchStubResult            *InterfaceConnectToSwitchStubResult
	DisconnectFromSwitchStubResult       *InterfaceDisconnectFromSwitchStubResult
	ConnectToPacketFilterStubResult      *InterfaceConnectToPacketFilterStubResult
	DisconnectFromPacketFilterStubResult *InterfaceDisconnectFromPacketFilterStubResult
}

// NewInterfaceStub creates new InterfaceStub instance
func NewInterfaceStub(caller sacloud.APICaller) sacloud.InterfaceAPI {
	return &InterfaceStub{}
}

// Find is API call with trace log
func (s *InterfaceStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.InterfaceFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("InterfaceStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *InterfaceStub) Create(ctx context.Context, zone string, param *sacloud.InterfaceCreateRequest) (*sacloud.InterfaceCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("InterfaceStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *InterfaceStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.InterfaceReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("InterfaceStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *InterfaceStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.InterfaceUpdateRequest) (*sacloud.InterfaceUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("InterfaceStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *InterfaceStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("InterfaceStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// Monitor is API call with trace log
func (s *InterfaceStub) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceMonitorResult, error) {
	if s.MonitorStubResult == nil {
		log.Fatal("InterfaceStub.MonitorStubResult is not set")
	}
	return s.MonitorStubResult.Values, s.MonitorStubResult.Err
}

// ConnectToSharedSegment is API call with trace log
func (s *InterfaceStub) ConnectToSharedSegment(ctx context.Context, zone string, id types.ID) error {
	if s.ConnectToSharedSegmentStubResult == nil {
		log.Fatal("InterfaceStub.ConnectToSharedSegmentStubResult is not set")
	}
	return s.ConnectToSharedSegmentStubResult.Err
}

// ConnectToSwitch is API call with trace log
func (s *InterfaceStub) ConnectToSwitch(ctx context.Context, zone string, id types.ID, switchID types.ID) error {
	if s.ConnectToSwitchStubResult == nil {
		log.Fatal("InterfaceStub.ConnectToSwitchStubResult is not set")
	}
	return s.ConnectToSwitchStubResult.Err
}

// DisconnectFromSwitch is API call with trace log
func (s *InterfaceStub) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromSwitchStubResult == nil {
		log.Fatal("InterfaceStub.DisconnectFromSwitchStubResult is not set")
	}
	return s.DisconnectFromSwitchStubResult.Err
}

// ConnectToPacketFilter is API call with trace log
func (s *InterfaceStub) ConnectToPacketFilter(ctx context.Context, zone string, id types.ID, packetFilterID types.ID) error {
	if s.ConnectToPacketFilterStubResult == nil {
		log.Fatal("InterfaceStub.ConnectToPacketFilterStubResult is not set")
	}
	return s.ConnectToPacketFilterStubResult.Err
}

// DisconnectFromPacketFilter is API call with trace log
func (s *InterfaceStub) DisconnectFromPacketFilter(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromPacketFilterStubResult == nil {
		log.Fatal("InterfaceStub.DisconnectFromPacketFilterStubResult is not set")
	}
	return s.DisconnectFromPacketFilterStubResult.Err
}

/*************************************************
* InternetStub
*************************************************/

// InternetFindStubResult is expected values of the Find operation
type InternetFindStubResult struct {
	Values *sacloud.InternetFindResult
	Err    error
}

// InternetCreateStubResult is expected values of the Create operation
type InternetCreateStubResult struct {
	Values *sacloud.InternetCreateResult
	Err    error
}

// InternetReadStubResult is expected values of the Read operation
type InternetReadStubResult struct {
	Values *sacloud.InternetReadResult
	Err    error
}

// InternetUpdateStubResult is expected values of the Update operation
type InternetUpdateStubResult struct {
	Values *sacloud.InternetUpdateResult
	Err    error
}

// InternetDeleteStubResult is expected values of the Delete operation
type InternetDeleteStubResult struct {
	Err error
}

// InternetUpdateBandWidthStubResult is expected values of the UpdateBandWidth operation
type InternetUpdateBandWidthStubResult struct {
	Values *sacloud.InternetUpdateBandWidthResult
	Err    error
}

// InternetAddSubnetStubResult is expected values of the AddSubnet operation
type InternetAddSubnetStubResult struct {
	Values *sacloud.InternetAddSubnetResult
	Err    error
}

// InternetUpdateSubnetStubResult is expected values of the UpdateSubnet operation
type InternetUpdateSubnetStubResult struct {
	Values *sacloud.InternetUpdateSubnetResult
	Err    error
}

// InternetDeleteSubnetStubResult is expected values of the DeleteSubnet operation
type InternetDeleteSubnetStubResult struct {
	Err error
}

// InternetMonitorStubResult is expected values of the Monitor operation
type InternetMonitorStubResult struct {
	Values *sacloud.InternetMonitorResult
	Err    error
}

// InternetStub is for trace InternetOp operations
type InternetStub struct {
	FindStubResult            *InternetFindStubResult
	CreateStubResult          *InternetCreateStubResult
	ReadStubResult            *InternetReadStubResult
	UpdateStubResult          *InternetUpdateStubResult
	DeleteStubResult          *InternetDeleteStubResult
	UpdateBandWidthStubResult *InternetUpdateBandWidthStubResult
	AddSubnetStubResult       *InternetAddSubnetStubResult
	UpdateSubnetStubResult    *InternetUpdateSubnetStubResult
	DeleteSubnetStubResult    *InternetDeleteSubnetStubResult
	MonitorStubResult         *InternetMonitorStubResult
}

// NewInternetStub creates new InternetStub instance
func NewInternetStub(caller sacloud.APICaller) sacloud.InternetAPI {
	return &InternetStub{}
}

// Find is API call with trace log
func (s *InternetStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.InternetFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("InternetStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *InternetStub) Create(ctx context.Context, zone string, param *sacloud.InternetCreateRequest) (*sacloud.InternetCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("InternetStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *InternetStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.InternetReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("InternetStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *InternetStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.InternetUpdateRequest) (*sacloud.InternetUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("InternetStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *InternetStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("InternetStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// UpdateBandWidth is API call with trace log
func (s *InternetStub) UpdateBandWidth(ctx context.Context, zone string, id types.ID, param *sacloud.InternetUpdateBandWidthRequest) (*sacloud.InternetUpdateBandWidthResult, error) {
	if s.UpdateBandWidthStubResult == nil {
		log.Fatal("InternetStub.UpdateBandWidthStubResult is not set")
	}
	return s.UpdateBandWidthStubResult.Values, s.UpdateBandWidthStubResult.Err
}

// AddSubnet is API call with trace log
func (s *InternetStub) AddSubnet(ctx context.Context, zone string, id types.ID, param *sacloud.InternetAddSubnetRequest) (*sacloud.InternetAddSubnetResult, error) {
	if s.AddSubnetStubResult == nil {
		log.Fatal("InternetStub.AddSubnetStubResult is not set")
	}
	return s.AddSubnetStubResult.Values, s.AddSubnetStubResult.Err
}

// UpdateSubnet is API call with trace log
func (s *InternetStub) UpdateSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID, param *sacloud.InternetUpdateSubnetRequest) (*sacloud.InternetUpdateSubnetResult, error) {
	if s.UpdateSubnetStubResult == nil {
		log.Fatal("InternetStub.UpdateSubnetStubResult is not set")
	}
	return s.UpdateSubnetStubResult.Values, s.UpdateSubnetStubResult.Err
}

// DeleteSubnet is API call with trace log
func (s *InternetStub) DeleteSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID) error {
	if s.DeleteSubnetStubResult == nil {
		log.Fatal("InternetStub.DeleteSubnetStubResult is not set")
	}
	return s.DeleteSubnetStubResult.Err
}

// Monitor is API call with trace log
func (s *InternetStub) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InternetMonitorResult, error) {
	if s.MonitorStubResult == nil {
		log.Fatal("InternetStub.MonitorStubResult is not set")
	}
	return s.MonitorStubResult.Values, s.MonitorStubResult.Err
}

/*************************************************
* LoadBalancerStub
*************************************************/

// LoadBalancerFindStubResult is expected values of the Find operation
type LoadBalancerFindStubResult struct {
	Values *sacloud.LoadBalancerFindResult
	Err    error
}

// LoadBalancerCreateStubResult is expected values of the Create operation
type LoadBalancerCreateStubResult struct {
	Values *sacloud.LoadBalancerCreateResult
	Err    error
}

// LoadBalancerReadStubResult is expected values of the Read operation
type LoadBalancerReadStubResult struct {
	Values *sacloud.LoadBalancerReadResult
	Err    error
}

// LoadBalancerUpdateStubResult is expected values of the Update operation
type LoadBalancerUpdateStubResult struct {
	Values *sacloud.LoadBalancerUpdateResult
	Err    error
}

// LoadBalancerDeleteStubResult is expected values of the Delete operation
type LoadBalancerDeleteStubResult struct {
	Err error
}

// LoadBalancerConfigStubResult is expected values of the Config operation
type LoadBalancerConfigStubResult struct {
	Err error
}

// LoadBalancerBootStubResult is expected values of the Boot operation
type LoadBalancerBootStubResult struct {
	Err error
}

// LoadBalancerShutdownStubResult is expected values of the Shutdown operation
type LoadBalancerShutdownStubResult struct {
	Err error
}

// LoadBalancerResetStubResult is expected values of the Reset operation
type LoadBalancerResetStubResult struct {
	Err error
}

// LoadBalancerMonitorInterfaceStubResult is expected values of the MonitorInterface operation
type LoadBalancerMonitorInterfaceStubResult struct {
	Values *sacloud.LoadBalancerMonitorInterfaceResult
	Err    error
}

// LoadBalancerStatusStubResult is expected values of the Status operation
type LoadBalancerStatusStubResult struct {
	Values *sacloud.LoadBalancerStatusResult
	Err    error
}

// LoadBalancerStub is for trace LoadBalancerOp operations
type LoadBalancerStub struct {
	FindStubResult             *LoadBalancerFindStubResult
	CreateStubResult           *LoadBalancerCreateStubResult
	ReadStubResult             *LoadBalancerReadStubResult
	UpdateStubResult           *LoadBalancerUpdateStubResult
	DeleteStubResult           *LoadBalancerDeleteStubResult
	ConfigStubResult           *LoadBalancerConfigStubResult
	BootStubResult             *LoadBalancerBootStubResult
	ShutdownStubResult         *LoadBalancerShutdownStubResult
	ResetStubResult            *LoadBalancerResetStubResult
	MonitorInterfaceStubResult *LoadBalancerMonitorInterfaceStubResult
	StatusStubResult           *LoadBalancerStatusStubResult
}

// NewLoadBalancerStub creates new LoadBalancerStub instance
func NewLoadBalancerStub(caller sacloud.APICaller) sacloud.LoadBalancerAPI {
	return &LoadBalancerStub{}
}

// Find is API call with trace log
func (s *LoadBalancerStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.LoadBalancerFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("LoadBalancerStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *LoadBalancerStub) Create(ctx context.Context, zone string, param *sacloud.LoadBalancerCreateRequest) (*sacloud.LoadBalancerCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("LoadBalancerStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *LoadBalancerStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.LoadBalancerReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("LoadBalancerStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *LoadBalancerStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.LoadBalancerUpdateRequest) (*sacloud.LoadBalancerUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("LoadBalancerStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *LoadBalancerStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("LoadBalancerStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// Config is API call with trace log
func (s *LoadBalancerStub) Config(ctx context.Context, zone string, id types.ID) error {
	if s.ConfigStubResult == nil {
		log.Fatal("LoadBalancerStub.ConfigStubResult is not set")
	}
	return s.ConfigStubResult.Err
}

// Boot is API call with trace log
func (s *LoadBalancerStub) Boot(ctx context.Context, zone string, id types.ID) error {
	if s.BootStubResult == nil {
		log.Fatal("LoadBalancerStub.BootStubResult is not set")
	}
	return s.BootStubResult.Err
}

// Shutdown is API call with trace log
func (s *LoadBalancerStub) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	if s.ShutdownStubResult == nil {
		log.Fatal("LoadBalancerStub.ShutdownStubResult is not set")
	}
	return s.ShutdownStubResult.Err
}

// Reset is API call with trace log
func (s *LoadBalancerStub) Reset(ctx context.Context, zone string, id types.ID) error {
	if s.ResetStubResult == nil {
		log.Fatal("LoadBalancerStub.ResetStubResult is not set")
	}
	return s.ResetStubResult.Err
}

// MonitorInterface is API call with trace log
func (s *LoadBalancerStub) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.LoadBalancerMonitorInterfaceResult, error) {
	if s.MonitorInterfaceStubResult == nil {
		log.Fatal("LoadBalancerStub.MonitorInterfaceStubResult is not set")
	}
	return s.MonitorInterfaceStubResult.Values, s.MonitorInterfaceStubResult.Err
}

// Status is API call with trace log
func (s *LoadBalancerStub) Status(ctx context.Context, zone string, id types.ID) (*sacloud.LoadBalancerStatusResult, error) {
	if s.StatusStubResult == nil {
		log.Fatal("LoadBalancerStub.StatusStubResult is not set")
	}
	return s.StatusStubResult.Values, s.StatusStubResult.Err
}

/*************************************************
* NFSStub
*************************************************/

// NFSFindStubResult is expected values of the Find operation
type NFSFindStubResult struct {
	Values *sacloud.NFSFindResult
	Err    error
}

// NFSCreateStubResult is expected values of the Create operation
type NFSCreateStubResult struct {
	Values *sacloud.NFSCreateResult
	Err    error
}

// NFSReadStubResult is expected values of the Read operation
type NFSReadStubResult struct {
	Values *sacloud.NFSReadResult
	Err    error
}

// NFSUpdateStubResult is expected values of the Update operation
type NFSUpdateStubResult struct {
	Values *sacloud.NFSUpdateResult
	Err    error
}

// NFSDeleteStubResult is expected values of the Delete operation
type NFSDeleteStubResult struct {
	Err error
}

// NFSBootStubResult is expected values of the Boot operation
type NFSBootStubResult struct {
	Err error
}

// NFSShutdownStubResult is expected values of the Shutdown operation
type NFSShutdownStubResult struct {
	Err error
}

// NFSResetStubResult is expected values of the Reset operation
type NFSResetStubResult struct {
	Err error
}

// NFSMonitorFreeDiskSizeStubResult is expected values of the MonitorFreeDiskSize operation
type NFSMonitorFreeDiskSizeStubResult struct {
	Values *sacloud.NFSMonitorFreeDiskSizeResult
	Err    error
}

// NFSMonitorInterfaceStubResult is expected values of the MonitorInterface operation
type NFSMonitorInterfaceStubResult struct {
	Values *sacloud.NFSMonitorInterfaceResult
	Err    error
}

// NFSStub is for trace NFSOp operations
type NFSStub struct {
	FindStubResult                *NFSFindStubResult
	CreateStubResult              *NFSCreateStubResult
	ReadStubResult                *NFSReadStubResult
	UpdateStubResult              *NFSUpdateStubResult
	DeleteStubResult              *NFSDeleteStubResult
	BootStubResult                *NFSBootStubResult
	ShutdownStubResult            *NFSShutdownStubResult
	ResetStubResult               *NFSResetStubResult
	MonitorFreeDiskSizeStubResult *NFSMonitorFreeDiskSizeStubResult
	MonitorInterfaceStubResult    *NFSMonitorInterfaceStubResult
}

// NewNFSStub creates new NFSStub instance
func NewNFSStub(caller sacloud.APICaller) sacloud.NFSAPI {
	return &NFSStub{}
}

// Find is API call with trace log
func (s *NFSStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.NFSFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("NFSStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *NFSStub) Create(ctx context.Context, zone string, param *sacloud.NFSCreateRequest) (*sacloud.NFSCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("NFSStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *NFSStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.NFSReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("NFSStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *NFSStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.NFSUpdateRequest) (*sacloud.NFSUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("NFSStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *NFSStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("NFSStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// Boot is API call with trace log
func (s *NFSStub) Boot(ctx context.Context, zone string, id types.ID) error {
	if s.BootStubResult == nil {
		log.Fatal("NFSStub.BootStubResult is not set")
	}
	return s.BootStubResult.Err
}

// Shutdown is API call with trace log
func (s *NFSStub) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	if s.ShutdownStubResult == nil {
		log.Fatal("NFSStub.ShutdownStubResult is not set")
	}
	return s.ShutdownStubResult.Err
}

// Reset is API call with trace log
func (s *NFSStub) Reset(ctx context.Context, zone string, id types.ID) error {
	if s.ResetStubResult == nil {
		log.Fatal("NFSStub.ResetStubResult is not set")
	}
	return s.ResetStubResult.Err
}

// MonitorFreeDiskSize is API call with trace log
func (s *NFSStub) MonitorFreeDiskSize(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.NFSMonitorFreeDiskSizeResult, error) {
	if s.MonitorFreeDiskSizeStubResult == nil {
		log.Fatal("NFSStub.MonitorFreeDiskSizeStubResult is not set")
	}
	return s.MonitorFreeDiskSizeStubResult.Values, s.MonitorFreeDiskSizeStubResult.Err
}

// MonitorInterface is API call with trace log
func (s *NFSStub) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.NFSMonitorInterfaceResult, error) {
	if s.MonitorInterfaceStubResult == nil {
		log.Fatal("NFSStub.MonitorInterfaceStubResult is not set")
	}
	return s.MonitorInterfaceStubResult.Values, s.MonitorInterfaceStubResult.Err
}

/*************************************************
* NoteStub
*************************************************/

// NoteFindStubResult is expected values of the Find operation
type NoteFindStubResult struct {
	Values *sacloud.NoteFindResult
	Err    error
}

// NoteCreateStubResult is expected values of the Create operation
type NoteCreateStubResult struct {
	Values *sacloud.NoteCreateResult
	Err    error
}

// NoteReadStubResult is expected values of the Read operation
type NoteReadStubResult struct {
	Values *sacloud.NoteReadResult
	Err    error
}

// NoteUpdateStubResult is expected values of the Update operation
type NoteUpdateStubResult struct {
	Values *sacloud.NoteUpdateResult
	Err    error
}

// NoteDeleteStubResult is expected values of the Delete operation
type NoteDeleteStubResult struct {
	Err error
}

// NoteStub is for trace NoteOp operations
type NoteStub struct {
	FindStubResult   *NoteFindStubResult
	CreateStubResult *NoteCreateStubResult
	ReadStubResult   *NoteReadStubResult
	UpdateStubResult *NoteUpdateStubResult
	DeleteStubResult *NoteDeleteStubResult
}

// NewNoteStub creates new NoteStub instance
func NewNoteStub(caller sacloud.APICaller) sacloud.NoteAPI {
	return &NoteStub{}
}

// Find is API call with trace log
func (s *NoteStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.NoteFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("NoteStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *NoteStub) Create(ctx context.Context, zone string, param *sacloud.NoteCreateRequest) (*sacloud.NoteCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("NoteStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *NoteStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.NoteReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("NoteStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *NoteStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.NoteUpdateRequest) (*sacloud.NoteUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("NoteStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *NoteStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("NoteStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

/*************************************************
* PacketFilterStub
*************************************************/

// PacketFilterFindStubResult is expected values of the Find operation
type PacketFilterFindStubResult struct {
	Values *sacloud.PacketFilterFindResult
	Err    error
}

// PacketFilterCreateStubResult is expected values of the Create operation
type PacketFilterCreateStubResult struct {
	Values *sacloud.PacketFilterCreateResult
	Err    error
}

// PacketFilterReadStubResult is expected values of the Read operation
type PacketFilterReadStubResult struct {
	Values *sacloud.PacketFilterReadResult
	Err    error
}

// PacketFilterUpdateStubResult is expected values of the Update operation
type PacketFilterUpdateStubResult struct {
	Values *sacloud.PacketFilterUpdateResult
	Err    error
}

// PacketFilterDeleteStubResult is expected values of the Delete operation
type PacketFilterDeleteStubResult struct {
	Err error
}

// PacketFilterStub is for trace PacketFilterOp operations
type PacketFilterStub struct {
	FindStubResult   *PacketFilterFindStubResult
	CreateStubResult *PacketFilterCreateStubResult
	ReadStubResult   *PacketFilterReadStubResult
	UpdateStubResult *PacketFilterUpdateStubResult
	DeleteStubResult *PacketFilterDeleteStubResult
}

// NewPacketFilterStub creates new PacketFilterStub instance
func NewPacketFilterStub(caller sacloud.APICaller) sacloud.PacketFilterAPI {
	return &PacketFilterStub{}
}

// Find is API call with trace log
func (s *PacketFilterStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.PacketFilterFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("PacketFilterStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *PacketFilterStub) Create(ctx context.Context, zone string, param *sacloud.PacketFilterCreateRequest) (*sacloud.PacketFilterCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("PacketFilterStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *PacketFilterStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.PacketFilterReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("PacketFilterStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *PacketFilterStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.PacketFilterUpdateRequest) (*sacloud.PacketFilterUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("PacketFilterStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *PacketFilterStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("PacketFilterStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

/*************************************************
* ServerStub
*************************************************/

// ServerFindStubResult is expected values of the Find operation
type ServerFindStubResult struct {
	Values *sacloud.ServerFindResult
	Err    error
}

// ServerCreateStubResult is expected values of the Create operation
type ServerCreateStubResult struct {
	Values *sacloud.ServerCreateResult
	Err    error
}

// ServerReadStubResult is expected values of the Read operation
type ServerReadStubResult struct {
	Values *sacloud.ServerReadResult
	Err    error
}

// ServerUpdateStubResult is expected values of the Update operation
type ServerUpdateStubResult struct {
	Values *sacloud.ServerUpdateResult
	Err    error
}

// ServerDeleteStubResult is expected values of the Delete operation
type ServerDeleteStubResult struct {
	Err error
}

// ServerChangePlanStubResult is expected values of the ChangePlan operation
type ServerChangePlanStubResult struct {
	Values *sacloud.ServerChangePlanResult
	Err    error
}

// ServerInsertCDROMStubResult is expected values of the InsertCDROM operation
type ServerInsertCDROMStubResult struct {
	Err error
}

// ServerEjectCDROMStubResult is expected values of the EjectCDROM operation
type ServerEjectCDROMStubResult struct {
	Err error
}

// ServerBootStubResult is expected values of the Boot operation
type ServerBootStubResult struct {
	Err error
}

// ServerShutdownStubResult is expected values of the Shutdown operation
type ServerShutdownStubResult struct {
	Err error
}

// ServerResetStubResult is expected values of the Reset operation
type ServerResetStubResult struct {
	Err error
}

// ServerMonitorStubResult is expected values of the Monitor operation
type ServerMonitorStubResult struct {
	Values *sacloud.ServerMonitorResult
	Err    error
}

// ServerStub is for trace ServerOp operations
type ServerStub struct {
	FindStubResult        *ServerFindStubResult
	CreateStubResult      *ServerCreateStubResult
	ReadStubResult        *ServerReadStubResult
	UpdateStubResult      *ServerUpdateStubResult
	DeleteStubResult      *ServerDeleteStubResult
	ChangePlanStubResult  *ServerChangePlanStubResult
	InsertCDROMStubResult *ServerInsertCDROMStubResult
	EjectCDROMStubResult  *ServerEjectCDROMStubResult
	BootStubResult        *ServerBootStubResult
	ShutdownStubResult    *ServerShutdownStubResult
	ResetStubResult       *ServerResetStubResult
	MonitorStubResult     *ServerMonitorStubResult
}

// NewServerStub creates new ServerStub instance
func NewServerStub(caller sacloud.APICaller) sacloud.ServerAPI {
	return &ServerStub{}
}

// Find is API call with trace log
func (s *ServerStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ServerFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("ServerStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *ServerStub) Create(ctx context.Context, zone string, param *sacloud.ServerCreateRequest) (*sacloud.ServerCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("ServerStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *ServerStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.ServerReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("ServerStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *ServerStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ServerUpdateRequest) (*sacloud.ServerUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("ServerStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *ServerStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("ServerStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// ChangePlan is API call with trace log
func (s *ServerStub) ChangePlan(ctx context.Context, zone string, id types.ID, plan *sacloud.ServerChangePlanRequest) (*sacloud.ServerChangePlanResult, error) {
	if s.ChangePlanStubResult == nil {
		log.Fatal("ServerStub.ChangePlanStubResult is not set")
	}
	return s.ChangePlanStubResult.Values, s.ChangePlanStubResult.Err
}

// InsertCDROM is API call with trace log
func (s *ServerStub) InsertCDROM(ctx context.Context, zone string, id types.ID, insertParam *sacloud.InsertCDROMRequest) error {
	if s.InsertCDROMStubResult == nil {
		log.Fatal("ServerStub.InsertCDROMStubResult is not set")
	}
	return s.InsertCDROMStubResult.Err
}

// EjectCDROM is API call with trace log
func (s *ServerStub) EjectCDROM(ctx context.Context, zone string, id types.ID, insertParam *sacloud.EjectCDROMRequest) error {
	if s.EjectCDROMStubResult == nil {
		log.Fatal("ServerStub.EjectCDROMStubResult is not set")
	}
	return s.EjectCDROMStubResult.Err
}

// Boot is API call with trace log
func (s *ServerStub) Boot(ctx context.Context, zone string, id types.ID) error {
	if s.BootStubResult == nil {
		log.Fatal("ServerStub.BootStubResult is not set")
	}
	return s.BootStubResult.Err
}

// Shutdown is API call with trace log
func (s *ServerStub) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	if s.ShutdownStubResult == nil {
		log.Fatal("ServerStub.ShutdownStubResult is not set")
	}
	return s.ShutdownStubResult.Err
}

// Reset is API call with trace log
func (s *ServerStub) Reset(ctx context.Context, zone string, id types.ID) error {
	if s.ResetStubResult == nil {
		log.Fatal("ServerStub.ResetStubResult is not set")
	}
	return s.ResetStubResult.Err
}

// Monitor is API call with trace log
func (s *ServerStub) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.ServerMonitorResult, error) {
	if s.MonitorStubResult == nil {
		log.Fatal("ServerStub.MonitorStubResult is not set")
	}
	return s.MonitorStubResult.Values, s.MonitorStubResult.Err
}

/*************************************************
* SIMStub
*************************************************/

// SIMFindStubResult is expected values of the Find operation
type SIMFindStubResult struct {
	Values *sacloud.SIMFindResult
	Err    error
}

// SIMCreateStubResult is expected values of the Create operation
type SIMCreateStubResult struct {
	Values *sacloud.SIMCreateResult
	Err    error
}

// SIMReadStubResult is expected values of the Read operation
type SIMReadStubResult struct {
	Values *sacloud.SIMReadResult
	Err    error
}

// SIMUpdateStubResult is expected values of the Update operation
type SIMUpdateStubResult struct {
	Values *sacloud.SIMUpdateResult
	Err    error
}

// SIMDeleteStubResult is expected values of the Delete operation
type SIMDeleteStubResult struct {
	Err error
}

// SIMActivateStubResult is expected values of the Activate operation
type SIMActivateStubResult struct {
	Err error
}

// SIMDeactivateStubResult is expected values of the Deactivate operation
type SIMDeactivateStubResult struct {
	Err error
}

// SIMAssignIPStubResult is expected values of the AssignIP operation
type SIMAssignIPStubResult struct {
	Err error
}

// SIMClearIPStubResult is expected values of the ClearIP operation
type SIMClearIPStubResult struct {
	Err error
}

// SIMIMEILockStubResult is expected values of the IMEILock operation
type SIMIMEILockStubResult struct {
	Err error
}

// SIMIMEIUnlockStubResult is expected values of the IMEIUnlock operation
type SIMIMEIUnlockStubResult struct {
	Err error
}

// SIMLogsStubResult is expected values of the Logs operation
type SIMLogsStubResult struct {
	Values *sacloud.SIMLogsResult
	Err    error
}

// SIMGetNetworkOperatorStubResult is expected values of the GetNetworkOperator operation
type SIMGetNetworkOperatorStubResult struct {
	Values *sacloud.SIMGetNetworkOperatorResult
	Err    error
}

// SIMSetNetworkOperatorStubResult is expected values of the SetNetworkOperator operation
type SIMSetNetworkOperatorStubResult struct {
	Err error
}

// SIMMonitorSIMStubResult is expected values of the MonitorSIM operation
type SIMMonitorSIMStubResult struct {
	Values *sacloud.SIMMonitorSIMResult
	Err    error
}

// SIMStub is for trace SIMOp operations
type SIMStub struct {
	FindStubResult               *SIMFindStubResult
	CreateStubResult             *SIMCreateStubResult
	ReadStubResult               *SIMReadStubResult
	UpdateStubResult             *SIMUpdateStubResult
	DeleteStubResult             *SIMDeleteStubResult
	ActivateStubResult           *SIMActivateStubResult
	DeactivateStubResult         *SIMDeactivateStubResult
	AssignIPStubResult           *SIMAssignIPStubResult
	ClearIPStubResult            *SIMClearIPStubResult
	IMEILockStubResult           *SIMIMEILockStubResult
	IMEIUnlockStubResult         *SIMIMEIUnlockStubResult
	LogsStubResult               *SIMLogsStubResult
	GetNetworkOperatorStubResult *SIMGetNetworkOperatorStubResult
	SetNetworkOperatorStubResult *SIMSetNetworkOperatorStubResult
	MonitorSIMStubResult         *SIMMonitorSIMStubResult
}

// NewSIMStub creates new SIMStub instance
func NewSIMStub(caller sacloud.APICaller) sacloud.SIMAPI {
	return &SIMStub{}
}

// Find is API call with trace log
func (s *SIMStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.SIMFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("SIMStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *SIMStub) Create(ctx context.Context, zone string, param *sacloud.SIMCreateRequest) (*sacloud.SIMCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("SIMStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *SIMStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.SIMReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("SIMStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *SIMStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.SIMUpdateRequest) (*sacloud.SIMUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("SIMStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *SIMStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("SIMStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// Activate is API call with trace log
func (s *SIMStub) Activate(ctx context.Context, zone string, id types.ID) error {
	if s.ActivateStubResult == nil {
		log.Fatal("SIMStub.ActivateStubResult is not set")
	}
	return s.ActivateStubResult.Err
}

// Deactivate is API call with trace log
func (s *SIMStub) Deactivate(ctx context.Context, zone string, id types.ID) error {
	if s.DeactivateStubResult == nil {
		log.Fatal("SIMStub.DeactivateStubResult is not set")
	}
	return s.DeactivateStubResult.Err
}

// AssignIP is API call with trace log
func (s *SIMStub) AssignIP(ctx context.Context, zone string, id types.ID, param *sacloud.SIMAssignIPRequest) error {
	if s.AssignIPStubResult == nil {
		log.Fatal("SIMStub.AssignIPStubResult is not set")
	}
	return s.AssignIPStubResult.Err
}

// ClearIP is API call with trace log
func (s *SIMStub) ClearIP(ctx context.Context, zone string, id types.ID) error {
	if s.ClearIPStubResult == nil {
		log.Fatal("SIMStub.ClearIPStubResult is not set")
	}
	return s.ClearIPStubResult.Err
}

// IMEILock is API call with trace log
func (s *SIMStub) IMEILock(ctx context.Context, zone string, id types.ID, param *sacloud.SIMIMEILockRequest) error {
	if s.IMEILockStubResult == nil {
		log.Fatal("SIMStub.IMEILockStubResult is not set")
	}
	return s.IMEILockStubResult.Err
}

// IMEIUnlock is API call with trace log
func (s *SIMStub) IMEIUnlock(ctx context.Context, zone string, id types.ID) error {
	if s.IMEIUnlockStubResult == nil {
		log.Fatal("SIMStub.IMEIUnlockStubResult is not set")
	}
	return s.IMEIUnlockStubResult.Err
}

// Logs is API call with trace log
func (s *SIMStub) Logs(ctx context.Context, zone string, id types.ID) (*sacloud.SIMLogsResult, error) {
	if s.LogsStubResult == nil {
		log.Fatal("SIMStub.LogsStubResult is not set")
	}
	return s.LogsStubResult.Values, s.LogsStubResult.Err
}

// GetNetworkOperator is API call with trace log
func (s *SIMStub) GetNetworkOperator(ctx context.Context, zone string, id types.ID) (*sacloud.SIMGetNetworkOperatorResult, error) {
	if s.GetNetworkOperatorStubResult == nil {
		log.Fatal("SIMStub.GetNetworkOperatorStubResult is not set")
	}
	return s.GetNetworkOperatorStubResult.Values, s.GetNetworkOperatorStubResult.Err
}

// SetNetworkOperator is API call with trace log
func (s *SIMStub) SetNetworkOperator(ctx context.Context, zone string, id types.ID, configs *sacloud.SIMNetworkOperatorConfigs) error {
	if s.SetNetworkOperatorStubResult == nil {
		log.Fatal("SIMStub.SetNetworkOperatorStubResult is not set")
	}
	return s.SetNetworkOperatorStubResult.Err
}

// MonitorSIM is API call with trace log
func (s *SIMStub) MonitorSIM(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.SIMMonitorSIMResult, error) {
	if s.MonitorSIMStubResult == nil {
		log.Fatal("SIMStub.MonitorSIMStubResult is not set")
	}
	return s.MonitorSIMStubResult.Values, s.MonitorSIMStubResult.Err
}

/*************************************************
* SwitchStub
*************************************************/

// SwitchFindStubResult is expected values of the Find operation
type SwitchFindStubResult struct {
	Values *sacloud.SwitchFindResult
	Err    error
}

// SwitchCreateStubResult is expected values of the Create operation
type SwitchCreateStubResult struct {
	Values *sacloud.SwitchCreateResult
	Err    error
}

// SwitchReadStubResult is expected values of the Read operation
type SwitchReadStubResult struct {
	Values *sacloud.SwitchReadResult
	Err    error
}

// SwitchUpdateStubResult is expected values of the Update operation
type SwitchUpdateStubResult struct {
	Values *sacloud.SwitchUpdateResult
	Err    error
}

// SwitchDeleteStubResult is expected values of the Delete operation
type SwitchDeleteStubResult struct {
	Err error
}

// SwitchConnectToBridgeStubResult is expected values of the ConnectToBridge operation
type SwitchConnectToBridgeStubResult struct {
	Err error
}

// SwitchDisconnectFromBridgeStubResult is expected values of the DisconnectFromBridge operation
type SwitchDisconnectFromBridgeStubResult struct {
	Err error
}

// SwitchStub is for trace SwitchOp operations
type SwitchStub struct {
	FindStubResult                 *SwitchFindStubResult
	CreateStubResult               *SwitchCreateStubResult
	ReadStubResult                 *SwitchReadStubResult
	UpdateStubResult               *SwitchUpdateStubResult
	DeleteStubResult               *SwitchDeleteStubResult
	ConnectToBridgeStubResult      *SwitchConnectToBridgeStubResult
	DisconnectFromBridgeStubResult *SwitchDisconnectFromBridgeStubResult
}

// NewSwitchStub creates new SwitchStub instance
func NewSwitchStub(caller sacloud.APICaller) sacloud.SwitchAPI {
	return &SwitchStub{}
}

// Find is API call with trace log
func (s *SwitchStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.SwitchFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("SwitchStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *SwitchStub) Create(ctx context.Context, zone string, param *sacloud.SwitchCreateRequest) (*sacloud.SwitchCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("SwitchStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *SwitchStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.SwitchReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("SwitchStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *SwitchStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.SwitchUpdateRequest) (*sacloud.SwitchUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("SwitchStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *SwitchStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("SwitchStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// ConnectToBridge is API call with trace log
func (s *SwitchStub) ConnectToBridge(ctx context.Context, zone string, id types.ID, bridgeID types.ID) error {
	if s.ConnectToBridgeStubResult == nil {
		log.Fatal("SwitchStub.ConnectToBridgeStubResult is not set")
	}
	return s.ConnectToBridgeStubResult.Err
}

// DisconnectFromBridge is API call with trace log
func (s *SwitchStub) DisconnectFromBridge(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromBridgeStubResult == nil {
		log.Fatal("SwitchStub.DisconnectFromBridgeStubResult is not set")
	}
	return s.DisconnectFromBridgeStubResult.Err
}

/*************************************************
* VPCRouterStub
*************************************************/

// VPCRouterFindStubResult is expected values of the Find operation
type VPCRouterFindStubResult struct {
	Values *sacloud.VPCRouterFindResult
	Err    error
}

// VPCRouterCreateStubResult is expected values of the Create operation
type VPCRouterCreateStubResult struct {
	Values *sacloud.VPCRouterCreateResult
	Err    error
}

// VPCRouterReadStubResult is expected values of the Read operation
type VPCRouterReadStubResult struct {
	Values *sacloud.VPCRouterReadResult
	Err    error
}

// VPCRouterUpdateStubResult is expected values of the Update operation
type VPCRouterUpdateStubResult struct {
	Values *sacloud.VPCRouterUpdateResult
	Err    error
}

// VPCRouterDeleteStubResult is expected values of the Delete operation
type VPCRouterDeleteStubResult struct {
	Err error
}

// VPCRouterConfigStubResult is expected values of the Config operation
type VPCRouterConfigStubResult struct {
	Err error
}

// VPCRouterBootStubResult is expected values of the Boot operation
type VPCRouterBootStubResult struct {
	Err error
}

// VPCRouterShutdownStubResult is expected values of the Shutdown operation
type VPCRouterShutdownStubResult struct {
	Err error
}

// VPCRouterResetStubResult is expected values of the Reset operation
type VPCRouterResetStubResult struct {
	Err error
}

// VPCRouterConnectToSwitchStubResult is expected values of the ConnectToSwitch operation
type VPCRouterConnectToSwitchStubResult struct {
	Err error
}

// VPCRouterDisconnectFromSwitchStubResult is expected values of the DisconnectFromSwitch operation
type VPCRouterDisconnectFromSwitchStubResult struct {
	Err error
}

// VPCRouterMonitorInterfaceStubResult is expected values of the MonitorInterface operation
type VPCRouterMonitorInterfaceStubResult struct {
	Values *sacloud.VPCRouterMonitorInterfaceResult
	Err    error
}

// VPCRouterStub is for trace VPCRouterOp operations
type VPCRouterStub struct {
	FindStubResult                 *VPCRouterFindStubResult
	CreateStubResult               *VPCRouterCreateStubResult
	ReadStubResult                 *VPCRouterReadStubResult
	UpdateStubResult               *VPCRouterUpdateStubResult
	DeleteStubResult               *VPCRouterDeleteStubResult
	ConfigStubResult               *VPCRouterConfigStubResult
	BootStubResult                 *VPCRouterBootStubResult
	ShutdownStubResult             *VPCRouterShutdownStubResult
	ResetStubResult                *VPCRouterResetStubResult
	ConnectToSwitchStubResult      *VPCRouterConnectToSwitchStubResult
	DisconnectFromSwitchStubResult *VPCRouterDisconnectFromSwitchStubResult
	MonitorInterfaceStubResult     *VPCRouterMonitorInterfaceStubResult
}

// NewVPCRouterStub creates new VPCRouterStub instance
func NewVPCRouterStub(caller sacloud.APICaller) sacloud.VPCRouterAPI {
	return &VPCRouterStub{}
}

// Find is API call with trace log
func (s *VPCRouterStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.VPCRouterFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("VPCRouterStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Create is API call with trace log
func (s *VPCRouterStub) Create(ctx context.Context, zone string, param *sacloud.VPCRouterCreateRequest) (*sacloud.VPCRouterCreateResult, error) {
	if s.CreateStubResult == nil {
		log.Fatal("VPCRouterStub.CreateStubResult is not set")
	}
	return s.CreateStubResult.Values, s.CreateStubResult.Err
}

// Read is API call with trace log
func (s *VPCRouterStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.VPCRouterReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("VPCRouterStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}

// Update is API call with trace log
func (s *VPCRouterStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.VPCRouterUpdateRequest) (*sacloud.VPCRouterUpdateResult, error) {
	if s.UpdateStubResult == nil {
		log.Fatal("VPCRouterStub.UpdateStubResult is not set")
	}
	return s.UpdateStubResult.Values, s.UpdateStubResult.Err
}

// Delete is API call with trace log
func (s *VPCRouterStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteStubResult == nil {
		log.Fatal("VPCRouterStub.DeleteStubResult is not set")
	}
	return s.DeleteStubResult.Err
}

// Config is API call with trace log
func (s *VPCRouterStub) Config(ctx context.Context, zone string, id types.ID) error {
	if s.ConfigStubResult == nil {
		log.Fatal("VPCRouterStub.ConfigStubResult is not set")
	}
	return s.ConfigStubResult.Err
}

// Boot is API call with trace log
func (s *VPCRouterStub) Boot(ctx context.Context, zone string, id types.ID) error {
	if s.BootStubResult == nil {
		log.Fatal("VPCRouterStub.BootStubResult is not set")
	}
	return s.BootStubResult.Err
}

// Shutdown is API call with trace log
func (s *VPCRouterStub) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	if s.ShutdownStubResult == nil {
		log.Fatal("VPCRouterStub.ShutdownStubResult is not set")
	}
	return s.ShutdownStubResult.Err
}

// Reset is API call with trace log
func (s *VPCRouterStub) Reset(ctx context.Context, zone string, id types.ID) error {
	if s.ResetStubResult == nil {
		log.Fatal("VPCRouterStub.ResetStubResult is not set")
	}
	return s.ResetStubResult.Err
}

// ConnectToSwitch is API call with trace log
func (s *VPCRouterStub) ConnectToSwitch(ctx context.Context, zone string, id types.ID, nicIndex int, switchID types.ID) error {
	if s.ConnectToSwitchStubResult == nil {
		log.Fatal("VPCRouterStub.ConnectToSwitchStubResult is not set")
	}
	return s.ConnectToSwitchStubResult.Err
}

// DisconnectFromSwitch is API call with trace log
func (s *VPCRouterStub) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID, nicIndex int) error {
	if s.DisconnectFromSwitchStubResult == nil {
		log.Fatal("VPCRouterStub.DisconnectFromSwitchStubResult is not set")
	}
	return s.DisconnectFromSwitchStubResult.Err
}

// MonitorInterface is API call with trace log
func (s *VPCRouterStub) MonitorInterface(ctx context.Context, zone string, id types.ID, index int, condition *sacloud.MonitorCondition) (*sacloud.VPCRouterMonitorInterfaceResult, error) {
	if s.MonitorInterfaceStubResult == nil {
		log.Fatal("VPCRouterStub.MonitorInterfaceStubResult is not set")
	}
	return s.MonitorInterfaceStubResult.Values, s.MonitorInterfaceStubResult.Err
}

/*************************************************
* ZoneStub
*************************************************/

// ZoneFindStubResult is expected values of the Find operation
type ZoneFindStubResult struct {
	Values *sacloud.ZoneFindResult
	Err    error
}

// ZoneReadStubResult is expected values of the Read operation
type ZoneReadStubResult struct {
	Values *sacloud.ZoneReadResult
	Err    error
}

// ZoneStub is for trace ZoneOp operations
type ZoneStub struct {
	FindStubResult *ZoneFindStubResult
	ReadStubResult *ZoneReadStubResult
}

// NewZoneStub creates new ZoneStub instance
func NewZoneStub(caller sacloud.APICaller) sacloud.ZoneAPI {
	return &ZoneStub{}
}

// Find is API call with trace log
func (s *ZoneStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) (*sacloud.ZoneFindResult, error) {
	if s.FindStubResult == nil {
		log.Fatal("ZoneStub.FindStubResult is not set")
	}
	return s.FindStubResult.Values, s.FindStubResult.Err
}

// Read is API call with trace log
func (s *ZoneStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.ZoneReadResult, error) {
	if s.ReadStubResult == nil {
		log.Fatal("ZoneStub.ReadStubResult is not set")
	}
	return s.ReadStubResult.Values, s.ReadStubResult.Err
}
