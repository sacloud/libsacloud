package main

import (
	"log"
	"path/filepath"

	"github.com/sacloud/libsacloud/v2/internal/define"
	"github.com/sacloud/libsacloud/v2/internal/tools"
)

const destination = "sacloud/zz_models.go"

func init() {
	log.SetFlags(0)
	log.SetPrefix("gen-api-models: ")
}

func main() {
	outputPath := destination
	tools.WriteFileWithTemplate(&tools.TemplateConfig{
		OutputPath: filepath.Join(tools.ProjectRootPath(), outputPath),
		Template:   tmpl,
		Parameter:  define.Resources,
	})
	log.Printf("generated: %s\n", outputPath)
}

const tmpl = `// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-models'; DO NOT EDIT

package sacloud

import (
{{- range .ImportStatementsForModelDef "github.com/sacloud/libsacloud/v2/pkg/mapconv" "gopkg.in/go-playground/validator.v9" "github.com/sacloud/libsacloud/v2/sacloud/accessor" }}
	{{ . }}
{{- end }}
)

{{ range .Models }}

/************************************************* 
* {{.Name}}
*************************************************/

// {{ .Name }} represents API parameter/response structure
type {{ .Name }} struct {
	{{- range .Fields }}
	{{.Name}} {{.TypeName}} {{if .HasTag }}` + "`" + `{{.TagString}}` + "`" + `{{end}}
	{{- end }}
}

// Validate validates by field tags
func (o *{{ .Name}}) Validate() error {
	return validator.New().Struct(o)
}

{{- $struct := .Name -}}
{{- range .Accessors }}
// {{.Name}} {{.Description}} 
func (o *{{ $struct }}) {{ .Name }}() {{.ResultType.GoTypeSourceCode}} {
	return accessor.{{.Name}}(o)
}
{{- end }}

{{- range .Fields }} {{ $name := .Name }}{{ $typeName := .TypeName }}
// Get{{$name}} returns value of {{$name}} 
func (o *{{ $struct }}) Get{{$name}}() {{$typeName}} {
	return o.{{$name}}
}

// Set{{$name}} sets value to {{$name}} 
func (o *{{ $struct }}) Set{{$name}}(v {{$typeName}}) {
	o.{{$name}} = v
}

{{ range .ExtendAccessors }}
{{ if not .AvoidGetter }}
// Get{{.Name}} gets value to {{.Name}} 
func (o *{{ $struct }}) Get{{.Name}}() {{ if .HasType }}{{ .TypeName }}{{ else }}{{ $typeName }}{{ end }} {
	return accessor.Get{{.Name}}(o) 
}
{{- end }} {{/* end of if not .AvoidGetter */}}

{{ if not .AvoidSetter }}
// Set{{.Name}} sets value to {{.Name}} 
func (o *{{ $struct }}) Set{{.Name}}(v {{ if .HasType }}{{ .TypeName }}{{ else }}{{ $typeName }}{{ end }}) {
	accessor.Set{{.Name}}(o, v) 
}
{{- end }} {{/* end of if not .AvoidSetter */}}
{{- end }} {{/* end of range .ExtendAccessors */}}
{{- end }} {{/* end of range .Fields */}}

{{- end }} {{/* end of range .Models */}}
`
